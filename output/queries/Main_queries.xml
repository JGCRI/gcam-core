<?xml version="1.0" encoding="UTF-8"?>
<queries>
   <queryGroup name="energy">
      <queryGroup name="primary energy">
         <supplyDemandQuery title="primary energy consumption by region (avg fossil efficiency)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy[1]/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :), 
			 	 		    $new_parent := element {local-name($input)} {$input/@*, 
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};
			 	 
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or starts-with(@name, 'elec_'))]//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 central production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 forecourt production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy[not(contains(@name, 'water'))]/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
			 	 	 (: } :)
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 ]]>
            </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="traditional biomass" to="j traditional biomass"/>
                  <rewrite from="geothermal-elect" to="i geothermal"/>
                  <rewrite from="biomass" to="d biomass"/>
                  <rewrite from="total biomass" to="d biomass"/>
                  <rewrite from="nuclear-H2" to="e nuclear"/>
                  <rewrite from="natural gas" to="b natural gas"/>
                  <rewrite from="wind-elect" to="g wind"/>
                  <rewrite from="exotic-elect" to="j breakthrough"/>
                  <rewrite from="elect_td_ind" to=""/>
                  <rewrite from="solar-elect" to="h solar"/>
                  <rewrite from="solar-H2" to="h solar"/>
                  <rewrite from="regional natural gas" to=""/>
                  <rewrite from="coal" to="c coal"/>
                  <rewrite from="crude oil" to="a oil"/>
                  <rewrite from="hydro-elect" to="f hydro"/>
                  <rewrite from="nuclear-elect" to="e nuclear"/>
                  <rewrite from="traded unconventional oil" to="a oil"/>
                  <rewrite from="wind-H2" to="g wind"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="primary energy consumption by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 ]]>
            </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="traditional biomass" to="j traditional biomass"/>
                  <rewrite from="geothermal-elect" to="i geothermal"/>
                  <rewrite from="biomass" to="d biomass"/>
                  <rewrite from="total biomass" to="d biomass"/>
                  <rewrite from="nuclear-H2" to="e nuclear"/>
                  <rewrite from="natural gas" to="b natural gas"/>
                  <rewrite from="wind-elect" to="g wind"/>
                  <rewrite from="exotic-elect" to="j breakthrough"/>
                  <rewrite from="elect_td_ind" to=""/>
                  <rewrite from="k new" to="k new"/>
                  <rewrite from="solar-elect" to="h solar"/>
                  <rewrite from="solar-H2" to="h solar"/>
                  <rewrite from="regional natural gas" to=""/>
                  <rewrite from="coal" to="c coal"/>
                  <rewrite from="crude oil" to="a oil"/>
                  <rewrite from="hydro-elect" to="f hydro"/>
                  <rewrite from="nuclear-elect" to="e nuclear"/>
                  <rewrite from="traded unconventional oil" to="a oil"/>
                  <rewrite from="wind-H2" to="g wind"/>
                  <rewrite from="seawater" to=""/>
                  <rewrite from="water_td_pri_C" to=""/>
                  <rewrite from="water_td_pri_W" to=""/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) > 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) > 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         ]]>
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to=""/>
                  <rewrite from="wind-H2 renewable" to="g wind"/>
                  <rewrite from="geothermal-elect" to="i geothermal"/>
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass"/>
                  <rewrite from="biomass" to="d biomass"/>
                  <rewrite from="traded biomass" to="d biomass"/>
                  <rewrite from="traded biomass CCS" to="d biomass CCS"/>
                  <rewrite from="nuclear-elect renewable" to="e nuclear"/>
                  <rewrite from="natural gas" to="b natural gas"/>
                  <rewrite from="exotic-elect" to="j breakthrough"/>
                  <rewrite from="wind-elect" to="g wind"/>
                  <rewrite from="elect_td_ind" to=""/>
                  <rewrite from="hydro-elect renewable" to="f hydro"/>
                  <rewrite from="solar-H2 renewable" to="h solar"/>
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS"/>
                  <rewrite from="regional natural gas" to=""/>
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS"/>
                  <rewrite from="coal CCS" to="c coal CCS"/>
                  <rewrite from="coal" to="c coal"/>
                  <rewrite from="crude oil" to="a oil"/>
                  <rewrite from="natural gas CCS" to="b natural gas CCS"/>
                  <rewrite from="crude oil CCS" to="a oil CCS"/>
                  <rewrite from="traded unconventional oil" to="a oil"/>
                  <rewrite from="geothermal-elect renewable" to="i geothermal"/>
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal"/>
                  <rewrite from="traditional biomass" to="j traditional biomass"/>
                  <rewrite from="regional sugar for ethanol" to="d biomass"/>
                  <rewrite from="biomass CCS" to="d biomass CCS"/>
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear"/>
                  <rewrite from="renewable" to=""/>
                  <rewrite from="regional corn for ethanol" to="d biomass"/>
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS"/>
                  <rewrite from="wind-elect renewable" to="g wind"/>
                  <rewrite from="regional biomassOil" to="d biomass"/>
                  <rewrite from="wind-elect renewable CCS" to="g wind"/>
                  <rewrite from="nuclear-H2 renewable" to="e nuclear"/>
                  <rewrite from="hydro-elect renewable CCS" to="f hydro"/>
                  <rewrite from="solar-elect renewable" to="h solar"/>
                  <rewrite from="solar-elect renewable CCS" to="h solar"/>
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS"/>
                  <rewrite from="seawater" to=""/>
                  <rewrite from="water consumption" to=""/>
                  <rewrite from="water withdrawals" to=""/>
                  <rewrite from="seawater CCS" to=""/>
                  <rewrite from="water consumption CCS" to=""/>
                  <rewrite from="water withdrawals CCS" to=""/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="resource production">
            <axis1 name="resource">resource</axis1>
            <axis2 name="Year">output</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='resource']//output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="resource supply curves">
            <axis1 name="grade">grade</axis1>
            <axis2 name="Year">available</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='resource']//grade/available/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="regional primary energy prices">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='regional oil' or @name='regional natural gas'
            or @name='regional coal' or @name='regional biomass' or @name='nuclearFuelGenIII')]/
            cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
      </queryGroup>
      <queryGroup name="energy transformation">
         <queryGroup name="electricity">
            <supplyDemandQuery title="elec gen by region (incl CHP)">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="true">*[@type='sector' (:collapse:)]//
               *[@type='technology' (:collapse:) and not (@name='elect_td_bld')]/
               *[@type='output' (:collapse:)  and (@name='electricity' or @name='elect_td_bld')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='electricity' or @name='elect_td_bld')]/
               *[@type='subsector' and not (@name='elect_td_bld')]//*[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by gen tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and
               (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use')]/
               *[@type='subsector']/*[@type='technology' and not (@name='electricity' or @name='elect_td_bld')]/
               *[@type='output' (:collapse:) and (@name='electricity' or @name='elect_td_bld')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by gen tech and cooling tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false"> *[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                  *[@type='output' (:collapse:)]/physical-output/node()
               </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by gen tech and cooling tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                  *[@type='output' (:collapse:)]/physical-output/node()
               </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by gen tech and cooling tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false"> *[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                  *[@type='output' (:collapse:)]/physical-output[
               @vintage=parent::*/parent::*/@year]/node()
               </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec energy input by subsector">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' (:collapse:) and not(
                                   @name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec energy input by elec gen tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
                  <level name="technology">
                     <rewrite from="Gen_II_LWR (once through)" to="Gen_II_LWR"/>
                     <rewrite from="gas (steam/CT) (cooling pond)" to="gas (steam/CT)"/>
                     <rewrite from="refined liquids (steam/CT) (once through)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (conv pul) (seawater)" to="coal (conv pul)"/>
                     <rewrite from="gas (CC CCS) (dry cooling)" to="gas (CC CCS)"/>
                     <rewrite from="coal (conv pul CCS) (dry cooling)" to="coal (conv pul CCS)"/>
                     <rewrite from="CSP (dry_hybrid)" to="CSP"/>
                     <rewrite from="gas (steam/CT) (once through)" to="gas (steam/CT)"/>
                     <rewrite from="biomass (conv CCS) (recirculating)" to="biomass (conv CCS)"/>
                     <rewrite from="coal (conv pul CCS) (seawater)" to="coal (conv pul CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (once through)" to="biomass (IGCC CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (recirculating)" to="biomass (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (seawater)" to="refined liquids (CC CCS)"/>
                     <rewrite from="biomass (conv) (seawater)" to="biomass (conv)"/>
                     <rewrite from="coal (conv pul) (cooling pond)" to="coal (conv pul)"/>
                     <rewrite from="coal (conv pul CCS) (recirculating)" to="coal (conv pul CCS)"/>
                     <rewrite from="gas (CC) (seawater)" to="gas (CC)"/>
                     <rewrite from="gas (CC CCS) (once through)" to="gas (CC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (once through)" to="refined liquids (CC CCS)"/>
                     <rewrite from="gas (CC CCS) (cooling pond)" to="gas (CC CCS)"/>
                     <rewrite from="biomass (IGCC) (recirculating)" to="biomass (IGCC)"/>
                     <rewrite from="biomass (IGCC CCS) (seawater)" to="biomass (IGCC CCS)"/>
                     <rewrite from="Gen_III (recirculating)" to="Gen_III"/>
                     <rewrite from="Gen_III (once through)" to="Gen_III"/>
                     <rewrite from="Gen_III (cooling pond)" to="Gen_III"/>
                     <rewrite from="CSP (recirculating)" to="CSP"/>
                     <rewrite from="refined liquids (CC) (dry cooling)" to="refined liquids (CC)"/>
                     <rewrite from="gas (steam/CT) (recirculating)" to="gas (steam/CT)"/>
                     <rewrite from="coal (IGCC CCS) (once through)" to="coal (IGCC CCS)"/>
                     <rewrite from="coal (conv pul) (dry cooling)" to="coal (conv pul)"/>
                     <rewrite from="CSP_storage (dry_hybrid)" to="CSP_storage"/>
                     <rewrite from="biomass (IGCC) (seawater)" to="biomass (IGCC)"/>
                     <rewrite from="biomass (IGCC CCS) (cooling pond)" to="biomass (IGCC CCS)"/>
                     <rewrite from="gas (CC) (dry cooling)" to="gas (CC)"/>
                     <rewrite from="coal (IGCC CCS) (seawater)" to="coal (IGCC CCS)"/>
                     <rewrite from="biomass (conv) (once through)" to="biomass (conv)"/>
                     <rewrite from="biomass (conv CCS) (once through)" to="biomass (conv CCS)"/>
                     <rewrite from="coal (IGCC CCS) (cooling pond)" to="coal (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (recirculating)" to="refined liquids (CC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (cooling pond)" to="refined liquids (CC CCS)"/>
                     <rewrite from="biomass (conv CCS) (seawater)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (dry cooling)" to="biomass (IGCC CCS)"/>
                     <rewrite from="refined liquids (steam/CT) (recirculating)" to="refined liquids (steam/CT)"/>
                     <rewrite from="Gen_III (seawater)" to="Gen_III"/>
                     <rewrite from="biomass (conv CCS) (cooling pond)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC) (cooling pond)" to="biomass (IGCC)"/>
                     <rewrite from="gas (steam/CT) (dry cooling)" to="gas (steam/CT)"/>
                     <rewrite from="refined liquids (steam/CT) (seawater)" to="refined liquids (steam/CT)"/>
                     <rewrite from="biomass (conv CCS) (dry cooling)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC) (dry cooling)" to="biomass (IGCC)"/>
                     <rewrite from="refined liquids (CC) (once through)" to="refined liquids (CC)"/>
                     <rewrite from="coal (conv pul CCS) (once through)" to="coal (conv pul CCS)"/>
                     <rewrite from="gas (CC) (cooling pond)" to="gas (CC)"/>
                     <rewrite from="coal (IGCC) (cooling pond)" to="coal (IGCC)"/>
                     <rewrite from="geothermal (recirculating)" to="geothermal"/>
                     <rewrite from="refined liquids (steam/CT) (dry cooling)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (IGCC) (seawater)" to="coal (IGCC)"/>
                     <rewrite from="gas (CC CCS) (recirculating)" to="gas (CC CCS)"/>
                     <rewrite from="gas (CC) (once through)" to="gas (CC)"/>
                     <rewrite from="gas (CC) (recirculating)" to="gas (CC)"/>
                     <rewrite from="refined liquids (CC) (cooling pond)" to="refined liquids (CC)"/>
                     <rewrite from="biomass (conv) (dry cooling)" to="biomass (conv)"/>
                     <rewrite from="refined liquids (CC) (recirculating)" to="refined liquids (CC)"/>
                     <rewrite from="Gen_II_LWR (cooling pond)" to="Gen_II_LWR"/>
                     <rewrite from="refined liquids (CC) (seawater)" to="refined liquids (CC)"/>
                     <rewrite from="biomass (IGCC) (once through)" to="biomass (IGCC)"/>
                     <rewrite from="coal (conv pul CCS) (cooling pond)" to="coal (conv pul CCS)"/>
                     <rewrite from="coal (conv pul) (once through)" to="coal (conv pul)"/>
                     <rewrite from="coal (IGCC) (recirculating)" to="coal (IGCC)"/>
                     <rewrite from="gas (CC CCS) (seawater)" to="gas (CC CCS)"/>
                     <rewrite from="Gen_II_LWR (recirculating)" to="Gen_II_LWR"/>
                     <rewrite from="coal (IGCC CCS) (dry cooling)" to="coal (IGCC CCS)"/>
                     <rewrite from="Gen_II_LWR (seawater)" to="Gen_II_LWR"/>
                     <rewrite from="gas (steam/CT) (seawater)" to="gas (steam/CT)"/>
                     <rewrite from="coal (IGCC CCS) (recirculating)" to="coal (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (dry cooling)" to="refined liquids (CC CCS)"/>
                     <rewrite from="coal (IGCC) (once through)" to="coal (IGCC)"/>
                     <rewrite from="biomass (conv) (recirculating)" to="biomass (conv)"/>
                     <rewrite from="CSP_storage (recirculating)" to="CSP_storage"/>
                     <rewrite from="refined liquids (steam/CT) (cooling pond)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (IGCC) (dry cooling)" to="coal (IGCC)"/>
                     <rewrite from="coal (conv pul) (recirculating)" to="coal (conv pul)"/>
                     <rewrite from="biomass (conv) (cooling pond)" to="biomass (conv)"/>
                     <rewrite from="geothermal (dry_hybrid)" to="geothermal"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec energy input by elec gen tech and cooling tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or @name='elect_td_ind'
               or @name='elect_td_trn')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen costs by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='electricity')]/*[@type='subsector']/cost/text()</xPath>
               <comments>doesn't include rooftop PV</comments>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen costs by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld')]/*[@type='subsector']/
              *[@type='technology' and not(@name='elect_td_bld')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen costs by cooling tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">price-paid[@vintage]</axis2>
               <xPath buildList="true" dataName="fuel cost" group="false" sumAll="false">*[@type = 'sector' and contains(@name,'elec_')]/*[@type = 'subsector']/
               *[@type = 'technology']/*[@type='input' and (@name='cooling system')]/
               price-paid[@vintage=parent::*/parent::*/@year]/text()</xPath>
               <comments>non-water costs only</comments>
                <labelRewriteList append-values="false">
                   <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld')]/
               *[@type='subsector' and not (@name='elect_td_bld')]/
               share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec share-weights by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld')]/
               *[@type='subsector' and not (@name='elect_td_bld')]/
               *[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec share-weights by cooling tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and contains(@name,'elec_') and not(contains(@name, 'water_td'))]/*[@type='subsector']/*[@type='technology']/share-weight/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec td inputs and outputs">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='electricity_net_ownuse' or
               @name='elect_td_bld' or @name='elect_td_ind' or @name='elect_td_trn')]/
               *[@type='subsector' (:collapse:)]/*[@type='technology' (:collapse:) and not (@name='rooftop_pv')]/
               *[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments>excludes rooftop pv</comments>
            </supplyDemandQuery>
            <supplyDemandQuery title="cogeneration by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='technology' (:collapse:)]/
               output-secondary[@name='electricity' and @type='output']/
               physical-output/node()</xPath>
               <comments>all techs of the same name aggregated</comments>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec consumption by demand sector">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='input' and (@name='elect_td_bld' or
               @name='elect_td_ind' or @name='elect_td_trn')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec sector water withdrawals">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) ]//
               *[@type='input' and (@name='water_td_elec_W')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec sector water consumption">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) ]//
               *[@type='input' and (@name='water_td_elec_C')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water withdrawals by gen tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector' and not(@name='elect_td_bld')]/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_W')]/demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
                  <level name="technology">
                     <rewrite from="Gen_II_LWR (once through)" to="Gen_II_LWR"/>
                     <rewrite from="gas (steam/CT) (cooling pond)" to="gas (steam/CT)"/>
                     <rewrite from="refined liquids (steam/CT) (once through)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (conv pul) (seawater)" to="coal (conv pul)"/>
                     <rewrite from="gas (CC CCS) (dry cooling)" to="gas (CC CCS)"/>
                     <rewrite from="coal (conv pul CCS) (dry cooling)" to="coal (conv pul CCS)"/>
                     <rewrite from="CSP (dry_hybrid)" to="CSP"/>
                     <rewrite from="gas (steam/CT) (once through)" to="gas (steam/CT)"/>
                     <rewrite from="biomass (conv CCS) (recirculating)" to="biomass (conv CCS)"/>
                     <rewrite from="coal (conv pul CCS) (seawater)" to="coal (conv pul CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (once through)" to="biomass (IGCC CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (recirculating)" to="biomass (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (seawater)" to="refined liquids (CC CCS)"/>
                     <rewrite from="biomass (conv) (seawater)" to="biomass (conv)"/>
                     <rewrite from="coal (conv pul) (cooling pond)" to="coal (conv pul)"/>
                     <rewrite from="coal (conv pul CCS) (recirculating)" to="coal (conv pul CCS)"/>
                     <rewrite from="gas (CC) (seawater)" to="gas (CC)"/>
                     <rewrite from="gas (CC CCS) (once through)" to="gas (CC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (once through)" to="refined liquids (CC CCS)"/>
                     <rewrite from="gas (CC CCS) (cooling pond)" to="gas (CC CCS)"/>
                     <rewrite from="biomass (IGCC) (recirculating)" to="biomass (IGCC)"/>
                     <rewrite from="biomass (IGCC CCS) (seawater)" to="biomass (IGCC CCS)"/>
                     <rewrite from="Gen_III (recirculating)" to="Gen_III"/>
                     <rewrite from="Gen_III (once through)" to="Gen_III"/>
                     <rewrite from="Gen_III (cooling pond)" to="Gen_III"/>
                     <rewrite from="CSP (recirculating)" to="CSP"/>
                     <rewrite from="refined liquids (CC) (dry cooling)" to="refined liquids (CC)"/>
                     <rewrite from="gas (steam/CT) (recirculating)" to="gas (steam/CT)"/>
                     <rewrite from="coal (IGCC CCS) (once through)" to="coal (IGCC CCS)"/>
                     <rewrite from="coal (conv pul) (dry cooling)" to="coal (conv pul)"/>
                     <rewrite from="CSP_storage (dry_hybrid)" to="CSP_storage"/>
                     <rewrite from="biomass (IGCC) (seawater)" to="biomass (IGCC)"/>
                     <rewrite from="biomass (IGCC CCS) (cooling pond)" to="biomass (IGCC CCS)"/>
                     <rewrite from="gas (CC) (dry cooling)" to="gas (CC)"/>
                     <rewrite from="coal (IGCC CCS) (seawater)" to="coal (IGCC CCS)"/>
                     <rewrite from="biomass (conv) (once through)" to="biomass (conv)"/>
                     <rewrite from="biomass (conv CCS) (once through)" to="biomass (conv CCS)"/>
                     <rewrite from="coal (IGCC CCS) (cooling pond)" to="coal (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (recirculating)" to="refined liquids (CC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (cooling pond)" to="refined liquids (CC CCS)"/>
                     <rewrite from="biomass (conv CCS) (seawater)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (dry cooling)" to="biomass (IGCC CCS)"/>
                     <rewrite from="refined liquids (steam/CT) (recirculating)" to="refined liquids (steam/CT)"/>
                     <rewrite from="Gen_III (seawater)" to="Gen_III"/>
                     <rewrite from="biomass (conv CCS) (cooling pond)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC) (cooling pond)" to="biomass (IGCC)"/>
                     <rewrite from="gas (steam/CT) (dry cooling)" to="gas (steam/CT)"/>
                     <rewrite from="refined liquids (steam/CT) (seawater)" to="refined liquids (steam/CT)"/>
                     <rewrite from="biomass (conv CCS) (dry cooling)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC) (dry cooling)" to="biomass (IGCC)"/>
                     <rewrite from="refined liquids (CC) (once through)" to="refined liquids (CC)"/>
                     <rewrite from="coal (conv pul CCS) (once through)" to="coal (conv pul CCS)"/>
                     <rewrite from="gas (CC) (cooling pond)" to="gas (CC)"/>
                     <rewrite from="coal (IGCC) (cooling pond)" to="coal (IGCC)"/>
                     <rewrite from="geothermal (recirculating)" to="geothermal"/>
                     <rewrite from="refined liquids (steam/CT) (dry cooling)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (IGCC) (seawater)" to="coal (IGCC)"/>
                     <rewrite from="gas (CC CCS) (recirculating)" to="gas (CC CCS)"/>
                     <rewrite from="gas (CC) (once through)" to="gas (CC)"/>
                     <rewrite from="gas (CC) (recirculating)" to="gas (CC)"/>
                     <rewrite from="refined liquids (CC) (cooling pond)" to="refined liquids (CC)"/>
                     <rewrite from="biomass (conv) (dry cooling)" to="biomass (conv)"/>
                     <rewrite from="refined liquids (CC) (recirculating)" to="refined liquids (CC)"/>
                     <rewrite from="Gen_II_LWR (cooling pond)" to="Gen_II_LWR"/>
                     <rewrite from="refined liquids (CC) (seawater)" to="refined liquids (CC)"/>
                     <rewrite from="biomass (IGCC) (once through)" to="biomass (IGCC)"/>
                     <rewrite from="coal (conv pul CCS) (cooling pond)" to="coal (conv pul CCS)"/>
                     <rewrite from="coal (conv pul) (once through)" to="coal (conv pul)"/>
                     <rewrite from="coal (IGCC) (recirculating)" to="coal (IGCC)"/>
                     <rewrite from="gas (CC CCS) (seawater)" to="gas (CC CCS)"/>
                     <rewrite from="Gen_II_LWR (recirculating)" to="Gen_II_LWR"/>
                     <rewrite from="coal (IGCC CCS) (dry cooling)" to="coal (IGCC CCS)"/>
                     <rewrite from="Gen_II_LWR (seawater)" to="Gen_II_LWR"/>
                     <rewrite from="gas (steam/CT) (seawater)" to="gas (steam/CT)"/>
                     <rewrite from="coal (IGCC CCS) (recirculating)" to="coal (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (dry cooling)" to="refined liquids (CC CCS)"/>
                     <rewrite from="coal (IGCC) (once through)" to="coal (IGCC)"/>
                     <rewrite from="biomass (conv) (recirculating)" to="biomass (conv)"/>
                     <rewrite from="CSP_storage (recirculating)" to="CSP_storage"/>
                     <rewrite from="refined liquids (steam/CT) (cooling pond)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (IGCC) (dry cooling)" to="coal (IGCC)"/>
                     <rewrite from="coal (conv pul) (recirculating)" to="coal (conv pul)"/>
                     <rewrite from="biomass (conv) (cooling pond)" to="biomass (conv)"/>
                     <rewrite from="geothermal (dry_hybrid)" to="geothermal"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water consumption by gen tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' ]/
               *[@type='subsector' and not(@name='elect_td_bld')]/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_C')]/demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
                  <level name="technology">
                     <rewrite from="Gen_II_LWR (once through)" to="Gen_II_LWR"/>
                     <rewrite from="gas (steam/CT) (cooling pond)" to="gas (steam/CT)"/>
                     <rewrite from="refined liquids (steam/CT) (once through)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (conv pul) (seawater)" to="coal (conv pul)"/>
                     <rewrite from="gas (CC CCS) (dry cooling)" to="gas (CC CCS)"/>
                     <rewrite from="coal (conv pul CCS) (dry cooling)" to="coal (conv pul CCS)"/>
                     <rewrite from="CSP (dry_hybrid)" to="CSP"/>
                     <rewrite from="gas (steam/CT) (once through)" to="gas (steam/CT)"/>
                     <rewrite from="biomass (conv CCS) (recirculating)" to="biomass (conv CCS)"/>
                     <rewrite from="coal (conv pul CCS) (seawater)" to="coal (conv pul CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (once through)" to="biomass (IGCC CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (recirculating)" to="biomass (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (seawater)" to="refined liquids (CC CCS)"/>
                     <rewrite from="biomass (conv) (seawater)" to="biomass (conv)"/>
                     <rewrite from="coal (conv pul) (cooling pond)" to="coal (conv pul)"/>
                     <rewrite from="coal (conv pul CCS) (recirculating)" to="coal (conv pul CCS)"/>
                     <rewrite from="gas (CC) (seawater)" to="gas (CC)"/>
                     <rewrite from="gas (CC CCS) (once through)" to="gas (CC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (once through)" to="refined liquids (CC CCS)"/>
                     <rewrite from="gas (CC CCS) (cooling pond)" to="gas (CC CCS)"/>
                     <rewrite from="biomass (IGCC) (recirculating)" to="biomass (IGCC)"/>
                     <rewrite from="biomass (IGCC CCS) (seawater)" to="biomass (IGCC CCS)"/>
                     <rewrite from="Gen_III (recirculating)" to="Gen_III"/>
                     <rewrite from="Gen_III (once through)" to="Gen_III"/>
                     <rewrite from="Gen_III (cooling pond)" to="Gen_III"/>
                     <rewrite from="CSP (recirculating)" to="CSP"/>
                     <rewrite from="refined liquids (CC) (dry cooling)" to="refined liquids (CC)"/>
                     <rewrite from="gas (steam/CT) (recirculating)" to="gas (steam/CT)"/>
                     <rewrite from="coal (IGCC CCS) (once through)" to="coal (IGCC CCS)"/>
                     <rewrite from="coal (conv pul) (dry cooling)" to="coal (conv pul)"/>
                     <rewrite from="CSP_storage (dry_hybrid)" to="CSP_storage"/>
                     <rewrite from="biomass (IGCC) (seawater)" to="biomass (IGCC)"/>
                     <rewrite from="biomass (IGCC CCS) (cooling pond)" to="biomass (IGCC CCS)"/>
                     <rewrite from="gas (CC) (dry cooling)" to="gas (CC)"/>
                     <rewrite from="coal (IGCC CCS) (seawater)" to="coal (IGCC CCS)"/>
                     <rewrite from="biomass (conv) (once through)" to="biomass (conv)"/>
                     <rewrite from="biomass (conv CCS) (once through)" to="biomass (conv CCS)"/>
                     <rewrite from="coal (IGCC CCS) (cooling pond)" to="coal (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (recirculating)" to="refined liquids (CC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (cooling pond)" to="refined liquids (CC CCS)"/>
                     <rewrite from="biomass (conv CCS) (seawater)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC CCS) (dry cooling)" to="biomass (IGCC CCS)"/>
                     <rewrite from="refined liquids (steam/CT) (recirculating)" to="refined liquids (steam/CT)"/>
                     <rewrite from="Gen_III (seawater)" to="Gen_III"/>
                     <rewrite from="biomass (conv CCS) (cooling pond)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC) (cooling pond)" to="biomass (IGCC)"/>
                     <rewrite from="gas (steam/CT) (dry cooling)" to="gas (steam/CT)"/>
                     <rewrite from="refined liquids (steam/CT) (seawater)" to="refined liquids (steam/CT)"/>
                     <rewrite from="biomass (conv CCS) (dry cooling)" to="biomass (conv CCS)"/>
                     <rewrite from="biomass (IGCC) (dry cooling)" to="biomass (IGCC)"/>
                     <rewrite from="refined liquids (CC) (once through)" to="refined liquids (CC)"/>
                     <rewrite from="coal (conv pul CCS) (once through)" to="coal (conv pul CCS)"/>
                     <rewrite from="gas (CC) (cooling pond)" to="gas (CC)"/>
                     <rewrite from="coal (IGCC) (cooling pond)" to="coal (IGCC)"/>
                     <rewrite from="geothermal (recirculating)" to="geothermal"/>
                     <rewrite from="refined liquids (steam/CT) (dry cooling)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (IGCC) (seawater)" to="coal (IGCC)"/>
                     <rewrite from="gas (CC CCS) (recirculating)" to="gas (CC CCS)"/>
                     <rewrite from="gas (CC) (once through)" to="gas (CC)"/>
                     <rewrite from="gas (CC) (recirculating)" to="gas (CC)"/>
                     <rewrite from="refined liquids (CC) (cooling pond)" to="refined liquids (CC)"/>
                     <rewrite from="biomass (conv) (dry cooling)" to="biomass (conv)"/>
                     <rewrite from="refined liquids (CC) (recirculating)" to="refined liquids (CC)"/>
                     <rewrite from="Gen_II_LWR (cooling pond)" to="Gen_II_LWR"/>
                     <rewrite from="refined liquids (CC) (seawater)" to="refined liquids (CC)"/>
                     <rewrite from="biomass (IGCC) (once through)" to="biomass (IGCC)"/>
                     <rewrite from="coal (conv pul CCS) (cooling pond)" to="coal (conv pul CCS)"/>
                     <rewrite from="coal (conv pul) (once through)" to="coal (conv pul)"/>
                     <rewrite from="coal (IGCC) (recirculating)" to="coal (IGCC)"/>
                     <rewrite from="gas (CC CCS) (seawater)" to="gas (CC CCS)"/>
                     <rewrite from="Gen_II_LWR (recirculating)" to="Gen_II_LWR"/>
                     <rewrite from="coal (IGCC CCS) (dry cooling)" to="coal (IGCC CCS)"/>
                     <rewrite from="Gen_II_LWR (seawater)" to="Gen_II_LWR"/>
                     <rewrite from="gas (steam/CT) (seawater)" to="gas (steam/CT)"/>
                     <rewrite from="coal (IGCC CCS) (recirculating)" to="coal (IGCC CCS)"/>
                     <rewrite from="refined liquids (CC CCS) (dry cooling)" to="refined liquids (CC CCS)"/>
                     <rewrite from="coal (IGCC) (once through)" to="coal (IGCC)"/>
                     <rewrite from="biomass (conv) (recirculating)" to="biomass (conv)"/>
                     <rewrite from="CSP_storage (recirculating)" to="CSP_storage"/>
                     <rewrite from="refined liquids (steam/CT) (cooling pond)" to="refined liquids (steam/CT)"/>
                     <rewrite from="coal (IGCC) (dry cooling)" to="coal (IGCC)"/>
                     <rewrite from="coal (conv pul) (recirculating)" to="coal (conv pul)"/>
                     <rewrite from="biomass (conv) (cooling pond)" to="biomass (conv)"/>
                     <rewrite from="geothermal (dry_hybrid)" to="geothermal"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water withdrawals by gen tech and cooling tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_W')]/
               demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water consumption by gen tech and cooling tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and (@name='water_td_elec_C')]/
               demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water withdrawals by gen tech and cooling tech (new)">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_W')]/
               demand-physical[
               @vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water consumption by gen tech and cooling tech (new)">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_C')]/
               demand-physical[
               @vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="refining">
            <supplyDemandQuery title="refined liquids production by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='refining')]//
               output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='refining')]/*[@type='subsector']//
               output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and contains(@name,'refining')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and contains(@name,'refining')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and contains(@name,'refining')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output[
               @vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refinery inputs by tech (energy and feedstocks)">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='refining' or @name='regional oil' or
               @name='regional corn for ethanol' or @name='regional sugar for ethanol')]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and not(contains(@name,'water'))]/demand-physical/node()</xPath>
               <comments>includes passthrough sectors for refining</comments>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='refining' or @name='refined liquids enduse' or
               @name='refined liquids industrial')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids costs by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='refining')]/*[@type='subsector']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids costs by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='refining')]/*[@type='subsector']/*[@type='technology']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refining and oil share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='refining' or @name='regional oil')]/
               *[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refining share-weights by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='refining')]/*[@type='subsector']/
               *[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="other energy transformation">
            <supplyDemandQuery title="hydrogen production by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="hydrogen inputs by tech (feedstocks and energy)">
               <axis1 name="fuel">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="hydrogen prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production' or
               @name='H2 enduse' or @name='H2 distribution')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="hydrogen production costs by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas production by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/
               *[@type='technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas production share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas inputs by tech (energy and feedstocks)">
               <axis1 name="fuel">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/
               *[@type='technology']/*[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas pipeline inputs and outputs">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='gas processing' or @name='gas pipeline')]//
               *[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">price</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='gas processing' or @name='gas pipeline' or
               @name='wholesale gas' or @name='delivered gas')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas costs by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/
               *[@type='technology']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="gas consumption by sector">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' ]//*[@type='input' and (@name='delivered gas' or
               @name='wholesale gas')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="district heat production by subsector (fuel)">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='district heat')]/*[@type='subsector']//
               *[@type='output']/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="district heat energy inputs by subsector">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='district heat')]/*[@type='subsector']//
               *[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
      </queryGroup>
      <queryGroup name="end use sectors">
        <queryGroup name="total end use sectors">
         <supplyDemandQuery title="total final energy by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="total final energy by aggregate sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="sector">
                  <rewrite from="trn_pass_road_bus" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV" to="transportation"/>
                  <rewrite from="trn_freight" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
                  <rewrite from="N fertilizer" to="industry"/>
                  <rewrite from="resid heating" to="building"/>
                  <rewrite from="industrial feedstocks" to="industry"/>
                  <rewrite from="comm heating" to="building"/>
                  <rewrite from="trn_aviation_intl" to="transportation"/>
                  <rewrite from="industrial energy use" to="industry"/>
                  <rewrite from="comm cooling" to="building"/>
                  <rewrite from="trn_shipping_intl" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
                  <rewrite from="trn_freight_road" to="transportation"/>
                  <rewrite from="comm others" to="building"/>
                  <rewrite from="trn_pass" to="transportation"/>
                  <rewrite from="process heat cement" to="industry"/>
                  <rewrite from="resid cooling" to="building"/>
                  <rewrite from="cement" to="industry"/>
                  <rewrite from="resid others" to="building"/>
                  <rewrite from="trn_pass_road" to="transportation"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="total final energy by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="final energy consumption by fuel">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="delivered biomass" to="biomass"/>
                  <rewrite from="elect_td_bld" to="electricity"/>
                  <rewrite from="refined liquids enduse" to="refined liquids"/>
                  <rewrite from="H2 enduse" to="hydrogen"/>
                  <rewrite from="delivered coal" to="coal"/>
                  <rewrite from="elect_td_trn" to="electricity"/>
                  <rewrite from="elect_td_ind" to="electricity"/>
                  <rewrite from="delivered gas" to="gas"/>
                  <rewrite from="wholesale gas" to="gas"/>
                  <rewrite from="refined liquids industrial" to="refined liquids"/>
                  <rewrite from="regional coal" to="coal"/>
                  <rewrite from="regional biomass" to="biomass"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="final energy consumption by sector and fuel">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="delivered biomass" to="biomass"/>
                  <rewrite from="elect_td_bld" to="electricity"/>
                  <rewrite from="refined liquids enduse" to="refined liquids"/>
                  <rewrite from="H2 enduse" to="hydrogen"/>
                  <rewrite from="delivered coal" to="coal"/>
                  <rewrite from="elect_td_trn" to="electricity"/>
                  <rewrite from="elect_td_ind" to="electricity"/>
                  <rewrite from="delivered gas" to="gas"/>
                  <rewrite from="wholesale gas" to="gas"/>
                  <rewrite from="refined liquids industrial" to="refined liquids"/>
                  <rewrite from="regional coal" to="coal"/>
                  <rewrite from="regional biomass" to="biomass"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="final energy prices">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='wholesale gas' or @name='delivered gas' or
            @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or
            @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or
            @name='H2 enduse'or @name='refined liquids industrial' or @name='refined liquids enduse')]/
            cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
       </queryGroup>
         <queryGroup name="buildings">
            <supplyDemandQuery title="building floorspace">
               <axis1 name="building">gcam-consumer[@name]</axis1>
               <axis2 name="Year">floorspace[@year]</axis2>
               <xPath buildList="true" dataName="floorspace" group="false" sumAll="false">gcam-consumer//floorspace/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building floorspace per capita">
               <axis1 name="Floorspace">input[@name]</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="percapita floorspace" group="false" sumAll="false"> <![CDATA[
                     declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
                         let $scn := $parent/ancestor::scenario,
                              $rgn := $parent/ancestor::region,
                             $consumer := $parent/ancestor::gcam-consumer
                           return
                              document { element scenario {
                                                $scn/@*,
                                                element region {
                                                    $rgn/@*,
                                                    element gcam-consumer {
                                                        $consumer/@*,
                                                        $append
                                                    }
                                                }
                                            }
                            }
                     };  
                     declare function local:get-percapita($inputs as node()*) as node()* {
                     unordered {    
                     for $input in $inputs
                     let $new_input :=  
                     element input {
                         attribute type {'input'},
                         attribute name { $input/@name },
                         for $demand in $input/floorspace
                         return 
                             element demand-physical {
                             attribute vintage {$demand/@year},
                             (: TODO: hard coding units :)
                             attribute unit { 'm^2/person'},
                             (: floorspace is billion m^2 and population is 1000 people and we want m^2/persion :)
                             text { $demand/text() div $input/ancestor::gcam-consumer/subregional-population[@year=$demand/@year] * 1000000 }
                         }
                     },
                     $new_root := local:append-heirarchy($input/parent::*/parent::*, $new_input)
                     return $new_root//text()
                     } 
                     };
                     declare function local:run-get-percapita($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {     
                     let $regionsG := if(not($regions[1] = 'Global'))
                              then $regions
                              else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                     return
                     for $scenario in $scenarios,       
                     $region in $regionsG   
                     let $scenario_split := tokenize($scenario, ' '),       
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
                     return 
                        local:get-percapita($currTree/gcam-consumer//building-node-input)
                        
         }; 
                 local:run-get-percapita((:scenarios:), (:regions:), (:collection:))
                 ]]>
            </xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building total final energy by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               *[@type='input' (:collapse:)]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building total final energy by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               *[@type='input' (:collapse:)]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building final energy by fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               *[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building final energy by service and fuel">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               *[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building final energy by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']//*[@type='input' (:collapse:)]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building final energy by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building final energy by tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()</xPath>
               <comments/>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building final energy by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical[@vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service output by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               output-primary[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service output by subsector">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']//output-primary[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service output by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/
               output-primary[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service output by tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               *[@type='technology']/output-primary[@type='output']/
               physical-output/node()</xPath>
               <comments/>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service output by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/
               output-primary[@type='output']/
               physical-output[@vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building internal gain energy by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//output-internal-gains[@type='output']/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="total service cost per unit floorspace">
               <axis1 name="building">building-node-input[@name]</axis1>
               <axis2 name="Year">price[@year]</axis2>
               <xPath buildList="true" dataName="cost by unit floorspace" group="false" sumAll="false">gcam-consumer//building-node-input/price/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service costs">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fuel prices to buildings">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='delivered gas' or @name='traditional biomass' or
               @name='delivered coal' or @name='delivered biomass' or @name='elect_td_bld' or
               @name='refined liquids enduse')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="building share-weights by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="Share-weight" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="industry">
          <queryGroup name="total industry">
            <supplyDemandQuery title="industry total final energy by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' (:collapse:) and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry total final energy by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' (:collapse:) and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments>process heat cement assigned to cement</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="process heat cement" to="cement"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry final energy by fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry final energy by service and fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments>process heat cement assigned to cement</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="process heat cement" to="cement"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry final energy by tech and fuel">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry feedstocks by type">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name,'feedstocks')]//
               *[@type='input' and @name != 'oil-credits']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry primary output by sector">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               output-primary/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry cogeneration by fuel">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='technology']/output-secondary[@name='electricity' and @type='output']/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fuel prices to industry">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='wholesale gas' or @name='delivered coal' or
               @name='delivered biomass' or @name='H2 enduse' or @name='elect_td_ind' or
               @name='refined liquids industrial')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/
               *[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry water withdrawals and consumption">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' and contains(@name,'water_td')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
           </queryGroup>
           <queryGroup name="cement">
            <supplyDemandQuery title="cement production by region">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='cement')]//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="cement production by tech (conv and ccs)">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='cement')]/*[@type='subsector']/*[@type='technology']/
               *[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="inputs to cement production">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='cement' or @name='process heat cement')]//
               *[@type='input' and not(@name='process heat cement')]/demand-physical/node()</xPath>
               <comments>process heat cement assigned to cement</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="process heat cement" to="cement"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="cement prices">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='cement')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
           </queryGroup>
           <queryGroup name="fertilizer production">
            <supplyDemandQuery title="fertilizer production by region">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='N fertilizer')]/
               *[@type='subsector' (:collapse:) and not(@name='Imports')]//
               *[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fertilizer production by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='N fertilizer')]/
               *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
               *[@type='output']/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fertilizer inputs by tech (energy and feedstocks)">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='N fertilizer')]//*[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fertilizer prices">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='N fertilizer')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
          </queryGroup>
         </queryGroup>
         <queryGroup name="transportation">
            <supplyDemandQuery title="transport total final energy by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' (:collapse:) and not (@name='renewable')]/
               demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport total final energy by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' (:collapse:) and not (@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
               <comments>pass-through transport sectors assigned to final demands</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="trn_pass_road_bus" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV_2W" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV_4W" to="trn_pass"/>
                     <rewrite from="trn_freight_road" to="trn_freight"/>
                     <rewrite from="trn_pass_road" to="trn_pass"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' and not (@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by mode and fuel">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='input' and not (@name='renewable')]/
               demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by tech and fuel">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and not(@name='renewable')]/
               demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and not(@name='renewable') and not(contains(@name,'trn_'))]/
               demand-physical/node()</xPath>
               <comments/>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and not (@name='renewable') and not(contains(@name,'trn_'))]/
               demand-physical[@vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='output' (:collapse:)]/physical-output[
                      @unit='million pass-km' or @unit='million ton-km']/node()</xPath>
               <comments>pass-through transport sectors assigned to final demands</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="trn_pass_road_bus" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV_2W" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV_4W" to="trn_pass"/>
                     <rewrite from="trn_freight_road" to="trn_freight"/>
                     <rewrite from="trn_pass_road" to="trn_pass"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by mode">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='output' (:collapse:) and not(@name='CAFEcredit')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output/node()</xPath>
               <comments/>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output[@vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport load factors">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']//load-factor/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fuel prices to transport">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='delivered gas' or @name='delivered coal' or @name='elect_td_trn'
               or @name='refined liquids enduse' or @name='H2 enduse')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="costs of transport services">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="costs of transport modes">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="costs of transport techs">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector' ]/*[@type='technology']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport tech non-energy cost">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">price-paid[@vintage]</axis2>
               <xPath buildList="true" dataName="non energy cost" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' (:collapse:) and not (@name='fuel taxes')]/
               price-paid/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="LDV energy by primary fuel">
               <axis1 name="Primary Fuel">input[@name]</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="true" sumAll="false"> <![CDATA[
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 };  
	       	 	 declare function local:trace-inputs($outputName as xs:string, $currTree as node(), $outputs as node()*, $is_usa as xs:boolean) as node()* {
	       			if( exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputName)) or not($currTree/*[@type='sector' and @name=$outputName]) or sum($outputs//text()) < 0.001)
then 
if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else
element input {
	       						attribute name {$outputName},
	       						attribute type {'input'},
	       						$outputs
	       					}
	       				else
	       			let $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName]/physical-output,
	       			    $sectorSums := for $out in $useOutputs
						   let $currInputs := $out/../following-sibling::input-energy/demand-physical[@vintage=$out/@vintage]
						   return 
							for $currInput in $currInputs
						        return
						        element sectorSum {
							        attribute name { $currInput/../@name},
								attribute year { $currInput/@vintage},
							element output-sum {
								text { $out }
							},
							element input-sum {
								text { $currInput }
							}
	       					   }
				   return for $sector in distinct-values($sectorSums/@name)
	       			       return local:trace-inputs($sector, $currTree, for $out in $outputs
	       								      let $totalOutputSum := sum($useOutputs[@vintage=$out/@vintage]),
	       								      $inputSum := sum($sectorSums[@name=$sector and @year=$out/@vintage]/input-sum)
	       								      where $inputSum > 0
	       								      return element { local-name($out) } {
	       										$out/@*,
	       										text{ $out * ($inputSum
	       											     div $totalOutputSum) }
	       								      }, $is_usa)
		};
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
				 $currInputs := $currTree/*[@type='sector' and @name='trn_pass_road']/*[@type='subsector' and @name='LDV']//*[@type='input']
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:trace-inputs($inputName, $currTree, $currInputs[@name=$inputName]/demand-physical, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
               ]]>
               </xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport subsector share-weights">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport tech share-weights">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type='subsector' ]/*[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport speeds">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">speed</axis2>
               <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type='subsector']/speed/text()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="aggregated GCAM-USA">
            <supplyDemandQuery title="building final energy by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="building service output by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not(@name= 'internal-gains')]/
               physical-output/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="building floorspace">
               <axis1 name="Building">gcam-consumer[@name]</axis1>
               <axis2 name="Year">floorspace[@year]</axis2>
               <xPath buildList="true" dataName="floorspace" group="false" sumAll="false">gcam-consumer//floorspace/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="industry final energy by service and fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or @name='H2 enduse' or
               @name='elect_td_ind' or @name='wholesale gas' or @name='refined liquids industrial')]/
               demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="process heat cement" to="cement"/>
                  </level>
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by tech and fuel">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and not(@name='renewable')]/
               demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport final energy by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and not (@name='renewable')
               and not(contains(@name,'trn_'))]/demand-physical[@vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="transport service output by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output[@vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="region">
                     <rewrite from="RI" to="USA"/>
                     <rewrite from="VT" to="USA"/>
                     <rewrite from="HI" to="USA"/>
                     <rewrite from="ME" to="USA"/>
                     <rewrite from="VA" to="USA"/>
                     <rewrite from="MI" to="USA"/>
                     <rewrite from="DE" to="USA"/>
                     <rewrite from="ID" to="USA"/>
                     <rewrite from="IA" to="USA"/>
                     <rewrite from="MD" to="USA"/>
                     <rewrite from="MA" to="USA"/>
                     <rewrite from="AR" to="USA"/>
                     <rewrite from="IL" to="USA"/>
                     <rewrite from="UT" to="USA"/>
                     <rewrite from="IN" to="USA"/>
                     <rewrite from="MN" to="USA"/>
                     <rewrite from="AZ" to="USA"/>
                     <rewrite from="MO" to="USA"/>
                     <rewrite from="MT" to="USA"/>
                     <rewrite from="MS" to="USA"/>
                     <rewrite from="NH" to="USA"/>
                     <rewrite from="NJ" to="USA"/>
                     <rewrite from="NM" to="USA"/>
                     <rewrite from="AK" to="USA"/>
                     <rewrite from="AL" to="USA"/>
                     <rewrite from="TX" to="USA"/>
                     <rewrite from="NC" to="USA"/>
                     <rewrite from="ND" to="USA"/>
                     <rewrite from="NE" to="USA"/>
                     <rewrite from="NY" to="USA"/>
                     <rewrite from="GA" to="USA"/>
                     <rewrite from="NV" to="USA"/>
                     <rewrite from="TN" to="USA"/>
                     <rewrite from="CA" to="USA"/>
                     <rewrite from="OK" to="USA"/>
                     <rewrite from="OH" to="USA"/>
                     <rewrite from="WY" to="USA"/>
                     <rewrite from="FL" to="USA"/>
                     <rewrite from="SD" to="USA"/>
                     <rewrite from="SC" to="USA"/>
                     <rewrite from="CT" to="USA"/>
                     <rewrite from="WV" to="USA"/>
                     <rewrite from="DC" to="USA"/>
                     <rewrite from="KY" to="USA"/>
                     <rewrite from="WI" to="USA"/>
                     <rewrite from="KS" to="USA"/>
                     <rewrite from="OR" to="USA"/>
                     <rewrite from="LA" to="USA"/>
                     <rewrite from="WA" to="USA"/>
                     <rewrite from="CO" to="USA"/>
                     <rewrite from="PA" to="USA"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
         </queryGroup>
      </queryGroup>
   </queryGroup>
   <queryGroup name="agriculture and land use">
      <queryGroup name="land use">
         <query title="detailed land allocation">
            <axis1 name="LandLeaf">LandLeaf[@name]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
            <comments/>
         </query>
         <query title="land allocation by crop">
            <axis1 name="LandLeaf">LandLeaf[@crop]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
            <comments/>
         </query>
         <query title="aggregated land allocation">
            <axis1 name="LandLeaf">LandLeaf[@crop]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="LandLeaf">
                  <rewrite from="Corn" to="crops"/>
                  <rewrite from="FiberCrop" to="crops"/>
                  <rewrite from="FodderGrass" to="crops"/>
                  <rewrite from="FodderHerb" to="crops"/>
                  <rewrite from="Forest" to="forest (managed)"/>
                  <rewrite from="Grassland" to="grass"/>
                  <rewrite from="MiscCrop" to="crops"/>
                  <rewrite from="OilCrop" to="crops"/>
                  <rewrite from="OtherArableLand" to="otherarable"/>
                  <rewrite from="OtherGrain" to="crops"/>
                  <rewrite from="PalmFruit" to="crops"/>
                  <rewrite from="Pasture" to="pasture (grazed)"/>
                  <rewrite from="ProtectedGrassland" to="grass"/>
                  <rewrite from="ProtectedShrubland" to="shrubs"/>
                  <rewrite from="ProtectedUnmanagedForest" to="forest (unmanaged)"/>
                  <rewrite from="ProtectedUnmanagedPasture" to="pasture (other)"/>
                  <rewrite from="Rice" to="crops"/>
                  <rewrite from="RockIceDesert" to="rock and desert"/>
                  <rewrite from="Root_Tuber" to="crops"/>
                  <rewrite from="Shrubland" to="shrubs"/>
                  <rewrite from="SugarCrop" to="crops"/>
                  <rewrite from="Tundra" to="tundra"/>
                  <rewrite from="UnmanagedForest" to="forest (unmanaged)"/>
                  <rewrite from="UnmanagedPasture" to="pasture (other)"/>
                  <rewrite from="UrbanLand" to="urban"/>
                  <rewrite from="Wheat" to="crops"/>
                  <rewrite from="biomass_grass" to="biomass"/>
                  <rewrite from="biomass_tree" to="biomass"/>
               </level>
            </labelRewriteList>
         </query>
         <query title="land allocation in a specified land use region">
            <axis1 name="LandLeaf">LandLeaf[@name]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
            LandLeaf[@land-region='MissouriR']/
            land-allocation/text()</xPath>
            <comments/>
         </query>
         <query title="land allocation by crop and water source">
            <axis1 name="water">water[@name]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false"> <![CDATA[
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            ]]>
            </xPath>
            <comments/>
         </query>
         <query title="LUC emissions by region">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">land-use-change-emission[@year]</axis2>
            <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true"><![CDATA[/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                land-use-change-emission[@year>1970]/text()]]></xPath>
            <comments/>
         </query>
         <query title="LUC emissions by LUT">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">land-use-change-emission[@year]</axis2>
            <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="false"><![CDATA[/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                land-use-change-emission[@year>1970]/text()]]></xPath>
            <comments/>
         </query>
         <query title="LUC emissions by LUT in a specified land use region">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">land-use-change-emission[@year]</axis2>
            <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="false"><![CDATA[/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
            LandLeaf[@land-region='MissouriR']//
            land-use-change-emission[@year>1970]/text()]]></xPath>
            <comments/>
         </query>
         <query title="vegetative carbon stock by region">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">above-ground-carbon-stock[@year]</axis2>
            <xPath buildList="true" dataName="above-ground-carbon-stock" group="false" sumAll="true"><![CDATA[/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                above-ground-carbon-stock[@year>1970]/text()]]></xPath>
            <comments/>
         </query>
         <query title="profit rate">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">profit-rate[@year]</axis2>
            <xPath buildList="true" dataName="profit-rate" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//profit-rate/text()</xPath>
            <comments/>
         </query>
         <query title="profit rate in a specified land use region">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">profit-rate[@year]</axis2>
            <xPath buildList="true" dataName="profit-rate" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
            LandLeaf[@land-region='MissouriR']/
            profit-rate/text()</xPath>
            <comments/>
         </query>
         <query title="land leaf shares">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">share[@year]</axis2>
            <xPath buildList="true" dataName="share" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//share/text()</xPath>
            <comments/>
         </query>
         <query title="land leaf shares in a specified land use region">
            <axis1 name="LandLeaf">LandLeaf</axis1>
            <axis2 name="Year">share[@year]</axis2>
            <xPath buildList="true" dataName="share" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
            LandLeaf[@land-region='MissouriR']/
            share/text()</xPath>
            <comments/>
         </query>
      </queryGroup>
      <queryGroup name="crops">
        <queryGroup name="crop production">
         <supplyDemandQuery title="ag production by crop type">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]//
            output-primary/physical-output/node()</xPath>
            <comments>primary output only (no residue biomass)</comments>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag production by subsector (land use region)">
            <axis1 name="technology">technology[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']//output-primary/physical-output/node()</xPath>
            <comments>primary output only (no residue biomass)</comments>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag production in a specified land use region">
            <axis1 name="technology">technology[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector' and contains(@name,'MissouriR')]//
            output-primary/physical-output/node()</xPath>
            <comments>primary output only (no residue biomass)</comments>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag production by tech">
            <axis1 name="technology">technology[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']/*[@type='technology']/
            output-primary/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag tech variable cost">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">technology</axis2>
            <xPath buildList="true" dataName="nonLandVariableCost" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']/*[@type='technology']/nonLandVariableCost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag tech yield">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">technology</axis2>
            <xPath buildList="true" dataName="yield" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']/*[@type='technology']/yield/text()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag tech yield in a specified land region">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">technology</axis2>
            <xPath buildList="true" dataName="yield" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']/*[@type='technology' and contains(@name,'MissouriR')]/yield/text()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="ag commodity prices">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
        </queryGroup>
         <queryGroup name="crop water demands">
            <supplyDemandQuery title="irrigation water withdrawals by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) ]//
               *[@type='input' (:collapse:) and contains(@name, 'water_td_irr') and ends-with(@name, '_W')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water withdrawals by crop type">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name, 'water_td_irr') and ends-with(@name, '_W')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water withdrawals by crop type and land region">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input' and contains(@name, 'water_td_irr')
               and ends-with(@name, '_W')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water withdrawals by ag tech">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/
               *[@type='input' and contains(@name, 'water_td_irr') and ends-with(@name, '_W')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water consumption by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) ]//
               *[@type='input' (:collapse:) and contains(@name, 'water_td_irr') and ends-with(@name, '_C')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water consumption by crop type">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name, 'water_td_irr')
               and ends-with(@name, '_C')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water consumption by crop type and land region">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input' and contains(@name, 'water_td_irr')
               and ends-with(@name, '_C')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="irrigation water consumption by ag tech">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/
               *[@type='input' and contains(@name, 'water_td_irr') and ends-with(@name, '_C')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="biophysical water demand by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (local-name()='AgSupplySector')]//
               *[@type='input' (:collapse:) and (@name='biophysical water consumption')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="biophysical water demand by crop type">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">AgSupplySector//*[@type='input' (:collapse:) and
               (@name='biophysical water consumption')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="biophysical water demand by crop type and land region">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">AgSupplySector/*[@type='subsector']//*[@type='input' and (@name='biophysical water consumption')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="biophysical water demand by ag tech">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">AgSupplySector/*[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='biophysical water consumption')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="crop fertilizer demands">
            <supplyDemandQuery title="fertilizer consumption by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and not (@name='Exports_N fertilizer')]//
               *[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fertilizer consumption by crop type">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and not (@name='Exports_N fertilizer')]//
               *[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fertilizer consumption by ag tech">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and not (@name='Exports_fertilizer')]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="fertilizer-crop input-output coefficients">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">IO-coefficient[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">AgSupplySector/*[@type='subsector']/
               *[@type='technology']/*[@type='input' and (@name='N fertilizer')]/IO-coefficient/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
      </queryGroup>
      <queryGroup name="bioenergy">
         <supplyDemandQuery title="purpose-grown biomass production">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='biomass')]//*[@type='output' (:collapse:)]/
            physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="residue biomass production">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector']//output-residue-biomass/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <resourceQuery title="MSW production">
            <axis1 name="resource">resource</axis1>
            <axis2 name="Year">output</axis2>
            <xPath buildList="false" dataName="production" group="false" sumAll="false">*[@type='resource' and (@name='biomass')]//output/node()</xPath>
            <comments/>
         </resourceQuery>
         <supplyDemandQuery title="regional biomass consumption">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="false" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='regional biomass')]//*[@type='input']/
            demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
      </queryGroup>
      <queryGroup name="animal products">
         <queryGroup name="meat and dairy">
            <supplyDemandQuery title="meat and dairy production by type">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]//
               *[@type='output']/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="meat and dairy production by tech">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               *[@type='subsector']/*[@type='technology']//
               *[@type='output']/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="meat and dairy prices">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="meat and dairy subsector share-weights">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               *[@type='subsector']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="meat and dairy tech share-weights">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               *[@type='subsector']/*[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="meat and dairy subsector costs">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               *[@type='subsector']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="meat and dairy tech costs">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               *[@type='subsector']/*[@type='technology']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="water consumption by meat and dairy production">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//
               *[@type='input' and contains(@name,'water_td_an') and ends-with(@name,'_C')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="animal feed">
            <supplyDemandQuery title="feed consumption by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry' )]//
               *[@type='input' and not(@name='renewable') and not(contains(@name,'water_td'))]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="feed consumption by meat and dairy tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry' )]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and not(@name='renewable') and not(contains(@name,'water_td'))]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="feed sources">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and
               (@name='FodderHerb_Residue' or @name='Pasture_FodderGrass' or @name='FeedCrops' or @name='Scavenging_Other')]//
               *[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="feed prices">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='FeedCrops' or @name='FodderHerb_Residue' or @name='Pasture_FodderGrass' or @name='Scavenging_Other')]/
               cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="feed subsector share-weights">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Scavenging_Other' or @name='Pasture_FodderGrass' or @name='FodderHerb_Residue' or @name='FeedCrops')]/
               *[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
      </queryGroup>
      <queryGroup name="ag demands">
         <supplyDemandQuery title="food consumption by type (general)">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='FoodDemand_Crops' or @name='FoodDemand_Meat')]//
            *[@type='output']/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="food consumption by type (specific)">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='FoodDemand_Crops' or @name='FoodDemand_Meat')]/
            *[@type='subsector']/*[@type='technology']/
            *[@type='output']/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="demand balances by crop commodity">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
            (@name='Corn' or @name='FiberCrop' or @name='FodderGrass' or @name='FodderHerb'
               or @name='MiscCrop' or @name='OilCrop' or @name='OtherGrain' or @name='PalmFruit'
               or @name='Rice' or @name='Root_Tuber' or @name='SugarCrop' or @name='Wheat'
               or @name='Forest' or @name='Pasture')]/
               demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="demand balances by meat and dairy commodity">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
            (@name='Beef' or @name='Pork' or @name='Poultry' or @name='SheepGoat' or @name='OtherMeat_Fish')]/
            demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
      </queryGroup>
   </queryGroup>
   <queryGroup name="emissions">
      <queryGroup name="CO2 emissions">
         <emissionsQueryBuilder title="CO2 emissions by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type='sector' (:collapse:)]//CO2/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="CO2 emissions by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type='sector']//CO2/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <supplyDemandQuery title="CO2 emissions by sector (no bio)">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">emissions[@year]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
            declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
            let $scn := $parent/ancestor::scenario,
            $rgn := $parent (: /ancestor::region :)
            return
            document { element scenario {
            $scn/@*,
            element region {
            $rgn/@*,
            $append
            }
            }
            }
            (: I can get by with just the scenario and region
            let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
            return
            if(local-name($parent) != 'scenario')
            then local:append-heirarchy($parent/parent::*, $new_node)
            else document { $new_node } :)
            }; 
            declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
            let $carbonCoefs := (
            <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
            $currCoef := $carbonCoefs[@name=$good]/text()
            return if(exists($currCoef)) then $currCoef else 0.0
            };
            
            
            declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
            not(local:get-carbon-coef($good) = 0.0)
            };
            declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
            if(empty($inputNameQueue)) then $coefs
            else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
            $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
            then 
            local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
            else
            let $inputName := $inputNameQueue[1],
            $newInputNameQueue := remove($inputNameQueue, 1),
            $useInputs := $currTree//*[@type='input' and @name=$inputName],
            $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
            $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
            return element input {
            attribute vintage { $vintage },
            text {
            sum($useInputs/demand-physical[@vintage=$vintage])
            }
            },
            $new_coefs := if(empty($useSectors)) then
            $coefs
            else
            $coefs | element sector {
            attribute name { $inputName },
            for $output in $useSectors
            return element output {
            attribute name { $output },
            for $inputSum in $totalInputSum
            let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
            $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
            $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
            $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
            local:get-carbon-coef($output)
            return (element share {
            attribute vintage { $inputSum/@vintage },
            text { $outputSum div $inputSum }
            }, element carbon_ratio {
            attribute vintage { $inputSum/@vintage },
            text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
            })
            }
            }
            return 
            local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
            };
            declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
            for $output in $coefs[@name=$outputName]/output
            let $emiss_go := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            },
            $emiss_stay := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage 
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            }
            return local:apply-coefs($output/@name, $emiss_go, $coefs) |
            element sector {
            attribute name { $output/@name},
            attribute type { 'sector' },
            $emiss_stay
            }
            else if( abs(sum($emissions)) > 0.001) then
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' },
            $emissions
            }
            else
            (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' }(:,
            $emissions:)
            }
            };
            declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
            (:unordered { :) 	
            let $regionsG := if(not($regions[1] = 'Global'))
            then $regions
            else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
            return
            for $scenario in $scenarios, 	    
            $region in $regionsG 	
            let $scenario_split := tokenize($scenario, ' '), 	    
            $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
            $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
            $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
            $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
            $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
            return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text() 
            return ($sector_emiss, $downstream_emiss )
            (:  } :)
            };
            local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
            ]]>
         </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="sector">
                  <rewrite from="elec_coal (conv pul)" to="electricity"/>
                  <rewrite from="elec_gas (CC)" to="electricity"/>
                  <rewrite from="elec_CSP" to="electricity"/>
                  <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                  <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                  <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                  <rewrite from="elec_Gen_III" to="electricity"/>
                  <rewrite from="elec_geothermal" to="electricity"/>
                  <rewrite from="elec_biomass (conv)" to="electricity"/>
                  <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                  <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                  <rewrite from="elec_coal (IGCC)" to="electricity"/>
                  <rewrite from="elec_CSP_storage" to="electricity"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <supplyDemandQuery title="CO2 emissions by assigned sector (no bio)">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">emissions[@year]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($inputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('unconventional oil production', "electricity", "cement", "N fertilizer"),
$inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]))
then 
local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $inputName := $inputNameQueue[1],
                        $newInputNameQueue := remove($inputNameQueue, 1),
                        $useInputs := $currTree//*[@type='input' and @name=$inputName],
                        $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
                        $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
                                          return element input {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useInputs/demand-physical[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := if(empty($useSectors)) then
                                         $coefs
                                     else
                                         $coefs | element sector {
                                            attribute name { $inputName },
                                            for $output in $useSectors
                                            return element output {
                                                       attribute name { $output },
                                                       for $inputSum in $totalInputSum
                                                       let $outputSum := sum($useInputs[ancestor::*[@type='sector' and @name=$output]]/demand-physical[@vintage=$inputSum/@vintage])
                                                       return element coef {
                                                                  attribute vintage { $inputSum/@vintage },
                                                                  text { $outputSum div $inputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
                for $output in $coefs[@name=$outputName]/output
                return local:apply-coefs($output/@name,
                    for $year in distinct-values($emissions/@year)
                    let $emissThisVintage := $emissions[@year=$year],
                        $firstEmiss := $emissThisVintage[1],
                        $emissSum := sum($emissThisVintage),
                        $coefThisVintage := $output/coef[@vintage=$year]
                    where $coefThisVintage > 0
                    return element { local-name($firstEmiss) } {
                            $firstEmiss/@*,
                            text{ $emissSum * $coefThisVintage }
                        }
	       			, $coefs)
            else if( abs(sum($emissions)) > 0.001) then
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' },
                    (: $emissions :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $e in $emissions
                    return element emissions { $e/@*, text{ $e/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' }(:,
                    $emissions:)
                }
        };
		declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currEmissSectors := $currTree/*[@type='sector' and descendant::CO2],
                 $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false())
				 return
				    for $sectorName in distinct-values($currEmissSectors/@name)
                    return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2/emissions, $coefs))//text()
			 	 } 
	 	 };
		 local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
               ]]>
               </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="sector">
                  <rewrite from="trn_passenger" to="transportation"/>
                  <rewrite from="trn_pass_road_bus" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV" to="transportation"/>
                  <rewrite from="trn_freight" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
                  <rewrite from="N fertilizer" to="industry"/>
                  <rewrite from="comm heating" to="buildings"/>
                  <rewrite from="resid heating" to="buildings"/>
                  <rewrite from="trn_aviation_intl" to="transportation"/>
                  <rewrite from="comm cooling" to="buildings"/>
                  <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
                  <rewrite from="trn_shipping_intl" to="transportation"/>
                  <rewrite from="trn_freight_road" to="transportation"/>
                  <rewrite from="comm others" to="buildings"/>
                  <rewrite from="trn_pass" to="transportation"/>
                  <rewrite from="resid cooling" to="buildings"/>
                  <rewrite from="resid others" to="buildings"/>
                  <rewrite from="unconventional oil production" to="industry"/>
                  <rewrite from="trn_pass_road" to="transportation"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         <emissionsQueryBuilder title="CO2 emissions by subsector">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']//CO2/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="CO2 emissions by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
            CO2/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="CO2 sequestration by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions-sequestered</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]//CO2/emissions-sequestered/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="CO2 sequestration by tech">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">emissions-sequestered</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
            CO2/emissions-sequestered/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
      </queryGroup>
      <queryGroup name="nonCO2 emissions">
         <emissionsQueryBuilder title="nonCO2 emissions by region">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)]//
            *[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="nonCO2 emissions by sector">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="nonCO2 emissions by resource production">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'resource']//*[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="nonCO2 emissions by subsector">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']//
            *[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="nonCO2 emissions by tech">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/
            *[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="specific nonCO2 emissions by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)]//
            *[@type = 'GHG' and (@name='BC')]/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="specific nonCO2 emissions by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG' and (@name='BC')]/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="specific nonCO2 emissions by resource production">
            <axis1 name="resource">resource</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'resource']//*[@type = 'GHG' and (@name='CH4')]/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="specific nonCO2 emissions by subsector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']//*[@type = 'GHG' and (@name='BC')]/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
         <emissionsQueryBuilder title="specific nonCO2 emissions by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/
            *[@type = 'GHG' and (@name='BC')]/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
      </queryGroup>
   </queryGroup>
   <queryGroup name="climate">
         <ClimateQuery title="CO2 concentrations">
            <axis1 name="CO2-concentration">none</axis1>
            <axis2 name="Year">CO2-concentration[@year]</axis2>
            <xPath buildList="true" dataName="CO2-concentration" group="false" sumAll="false">climate-model/CO2-concentration/text()</xPath>
            <comments/>
         </ClimateQuery>
         <ClimateQuery title="total climate forcing">
            <axis1 name="forcing-total">none</axis1>
            <axis2 name="Year">forcing-total[@year]</axis2>
            <xPath buildList="true" dataName="forcing-total" group="false" sumAll="false">climate-model/forcing-total/text()</xPath>
            <comments/>
         </ClimateQuery>
         <ClimateQuery title="global mean temperature">
            <axis1 name="temperature">none</axis1>
            <axis2 name="Year">global-mean-temperature[@year]</axis2>
            <xPath buildList="true" dataName="global-mean-temperature" group="false" sumAll="false">climate-model/global-mean-temperature/text()</xPath>
            <comments/>
         </ClimateQuery>
         <ClimateQuery title="net terrestrial C uptake">
            <axis1 name="net-terrestrial-uptake">none</axis1>
            <axis2 name="Year">net-terrestrial-uptake[@year]</axis2>
            <xPath buildList="true" dataName="net-terrestrial-uptake" group="false" sumAll="false">climate-model/net-terrestrial-uptake/text()</xPath>
            <comments/>
         </ClimateQuery>
   </queryGroup>
   <queryGroup name="socioeconomics">
      <demographicsQuery title="population by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">populationMiniCAM</axis2>
         <xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
         <comments/>
      </demographicsQuery>
      <gdpQueryBuilder title="GDP MER by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">gdp-mer</axis2>
         <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
         <comments/>
      </gdpQueryBuilder>
      <gdpQueryBuilder title="GDP per capita MER by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">gdp-per-capita-mer</axis2>
         <xPath buildList="true" dataName="gdp-per-capita-mer" group="false" sumAll="false">GDP/gdp-per-capita-mer/text()</xPath>
         <comments/>
      </gdpQueryBuilder>
      <gdpQueryBuilder title="GDP per capita PPP by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">gdp-per-capita-ppp</axis2>
         <xPath buildList="true" dataName="gdp-per-capita-ppp" group="false" sumAll="false">GDP/gdp-per-capita-ppp/text()</xPath>
         <comments/>
      </gdpQueryBuilder>
   </queryGroup>
   <queryGroup name="policy">
      <marketQuery title="CO2 prices">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true() and contains(@name,'CO2')]/price/node()</xPath>
         <comments/>
      </marketQuery>
      <costCurveQuery title="policy cost by period">
         <axis1 name="region">Curve</axis1>
         <axis2 name="Year">DataPoint</axis2>
         <xPath buildList="true" dataName="Cost" group="false" sumAll="false">PointSet/DataPoint/y/text()</xPath>
         <comments/>
      </costCurveQuery>
      <costCurveQuery title="undiscounted policy cost">
         <axis1 name="UndiscountedCost">UndiscountedCost</axis1>
         <axis2 name="region">UndiscountedCost</axis2>
         <xPath buildList="true" dataName="Undiscounted Cost" group="false" sumAll="false">/text()</xPath>
         <comments/>
      </costCurveQuery>
      <costCurveQuery title="discounted policy cost">
         <axis1 name="DiscountedCost">DiscountedCost</axis1>
         <axis2 name="region">DiscountedCost</axis2>
         <xPath buildList="true" dataName="Discounted Cost" group="false" sumAll="false">/text()</xPath>
         <comments/>
      </costCurveQuery>
      <costCurveQuery title="regional CO2 MAC curves by period">
         <axis1 name="region">Curve</axis1>
         <axis2 name="Tax">DataPoint</axis2>
         <chartLabelColumn>CostCurves</chartLabelColumn>
         <xPath buildList="true" dataName="Cost" group="false" sumAll="false">PointSet/DataPoint/x/text()</xPath>
         <comments/>
      </costCurveQuery>
   </queryGroup>
   <queryGroup name="water demands">
      <supplyDemandQuery title="water withdrawals by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="water withdrawals by water mapping source">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='input' and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="water withdrawals by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="water withdrawals by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input' (:collapse:)
         and contains(@name,'water_td') and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
            </level>
            <level name="subsector">
               <rewrite from="biomass (IGCC)" to="biomass"/>
               <rewrite from="CSP" to="solar"/>
               <rewrite from="Gen_III" to="nuclear"/>
               <rewrite from="gas (CC)" to="gas"/>
               <rewrite from="Gen_II_LWR" to="nuclear"/>
               <rewrite from="biomass (conv)" to="biomass"/>
               <rewrite from="gas (steam/CT)" to="gas"/>
               <rewrite from="geothermal" to="geothermal"/>
               <rewrite from="coal (conv pul)" to="coal"/>
               <rewrite from="refined liquids (CC)" to="refined liquids"/>
               <rewrite from="coal (IGCC)" to="coal"/>
               <rewrite from="CSP_storage" to="solar"/>
               <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="water withdrawals by tech">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/*[@type='input' (:collapse:)
         and contains(@name,'water_td') and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="water consumption by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="water consumption by water mapping source">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='input' and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="water consumption by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="water consumption by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
            </level>
            <level name="subsector">
               <rewrite from="biomass (IGCC)" to="biomass"/>
               <rewrite from="CSP" to="solar"/>
               <rewrite from="Gen_III" to="nuclear"/>
               <rewrite from="gas (CC)" to="gas"/>
               <rewrite from="Gen_II_LWR" to="nuclear"/>
               <rewrite from="biomass (conv)" to="biomass"/>
               <rewrite from="gas (steam/CT)" to="gas"/>
               <rewrite from="geothermal" to="geothermal"/>
               <rewrite from="coal (conv pul)" to="coal"/>
               <rewrite from="refined liquids (CC)" to="refined liquids"/>
               <rewrite from="coal (IGCC)" to="coal"/>
               <rewrite from="CSP_storage" to="solar"/>
               <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="water consumption by tech">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/*[@type='input' (:collapse:)
         and contains(@name,'water_td') and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="general">
      <queryGroup name="markets and prices">
         <marketQuery title="prices of all markets">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/price/node()</xPath>
            <comments/>
         </marketQuery>
         <marketQuery title="supply of all markets">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/supply/node()</xPath>
            <comments/>
         </marketQuery>
         <marketQuery title="demand of all markets">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/demand/node()</xPath>
            <comments/>
         </marketQuery>
         <marketQuery title="price of a specific market">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true() and contains(@name,'OtherMeat')]/price/node()</xPath>
            <comments/>
         </marketQuery>
         <marketQuery title="supply of a specific market">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true() and contains(@name, 'OtherMeat')]/supply/node()</xPath>
            <comments/>
         </marketQuery>
         <supplyDemandQuery title="prices by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector']/cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="costs by subsector">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (local-name()!='AgSupplySector')]/*[@type = 'subsector']/cost/text()</xPath>
            <comments>Excludes AgSupplySubsector costs, where data written out are no meaningful</comments>
         </supplyDemandQuery>
         <supplyDemandQuery title="costs by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">technology</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (local-name()!='AgSupplySector')]/*[@type = 'subsector']/*[@type = 'technology']/cost/text()</xPath>
            <comments>Excludes AgProductionTechnology costs, where data written out are no meaningful</comments>
         </supplyDemandQuery>
         <supplyDemandQuery title="costs by tech and input">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">price-paid[@vintage]</axis2>
            <xPath buildList="true" dataName="fuel cost" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/
            *[@type='input']/price-paid[@vintage=parent::*/parent::*/@year]/text()</xPath>
            <comments>excludes energy and emissions related costs which are not printed</comments>
         </supplyDemandQuery>
      </queryGroup>
      <queryGroup name="inter-sectoral flows">
         <supplyDemandQuery title="inputs by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input']/demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="inputs by subsector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input']/demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="inputs by tech">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/*[@type='input']/demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="outputs by sector">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='output']/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="outputs by subsector">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='output']/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
         <supplyDemandQuery title="outputs by tech">
            <axis1 name="technology">technology[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/*[@type='output']/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
      </queryGroup>
   </queryGroup>
   <queryGroup name="GCAM USA">
      <queryGroup name="primary energy">
         <supplyDemandQuery title="primary energy consumption by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='base load generation' or @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 ]]>
            </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="traditional biomass" to="j traditional biomass"/>
                  <rewrite from="geothermal-elect" to="i geothermal"/>
                  <rewrite from="biomass" to="d biomass"/>
                  <rewrite from="total biomass" to="d biomass"/>
                  <rewrite from="nuclear-H2" to="e nuclear"/>
                  <rewrite from="natural gas" to="b natural gas"/>
                  <rewrite from="wind-elect" to="g wind"/>
                  <rewrite from="exotic-elect" to="j breakthrough"/>
                  <rewrite from="elect_td_ind" to=""/>
                  <rewrite from="k new" to="k new"/>
                  <rewrite from="solar-elect" to="h solar"/>
                  <rewrite from="solar-H2" to="h solar"/>
                  <rewrite from="regional natural gas" to=""/>
                  <rewrite from="coal" to="c coal"/>
                  <rewrite from="crude oil" to="a oil"/>
                  <rewrite from="hydro-elect" to="f hydro"/>
                  <rewrite from="nuclear-elect" to="e nuclear"/>
                  <rewrite from="traded unconventional oil" to="a oil"/>
                  <rewrite from="wind-H2" to="g wind"/>
                  <rewrite from="seawater" to=""/>
                  <rewrite from="water_td_pri_C" to=""/>
                  <rewrite from="water_td_pri_W" to=""/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
      </queryGroup>
      <queryGroup name="energy transformation">
         <queryGroup name="electricity">
            <supplyDemandQuery title="elec gen by region (incl CHP)">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="true">*[@type='sector' (:collapse:)]//
               *[@type='technology' (:collapse:) and not (@name='elect_td_bld')]/
               *[@type='output' (:collapse:)  and (@name='electricity' or @name='base load generation' or @name='intermediate generation' or 
               @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='electricity' or 
               @name='base load generation' or @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
               *[@type='subsector' and not (@name='elect_td_bld')]//*[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen by gen tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='electricity' or 
               @name='base load generation' or @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or 
               @name='elect_td_bld' or @name='industrial energy use')]/
               *[@type='subsector']/*[@type='technology' and not (@name='electricity' or @name='elect_td_bld')]/
               *[@type='output' (:collapse:) and (@name='electricity' or @name='base load generation' or @name='intermediate generation' or 
               @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec energy input by subsector">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' ) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' (:collapse:) and not(
                                   @name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="base load generation" to="electricity"/>
                     <rewrite from="intermediate generation" to="electricity"/>
                     <rewrite from="subpeak generation" to="electricity"/>
                     <rewrite from="peak generation" to="electricity"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec energy input by elec gen tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' ) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="base load generation" to="electricity"/>
                     <rewrite from="intermediate generation" to="electricity"/>
                     <rewrite from="subpeak generation" to="electricity"/>
                     <rewrite from="peak generation" to="electricity"/>
                  </level>
                  <level name="technology">
                    <rewrite from="biomass_base_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_base_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_base_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_base_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_int_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_int_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_int_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_int_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_peak_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_peak_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_peak_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_peak_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_subpeak_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_subpeak_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_subpeak_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_subpeak_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="coal_base_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_base_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_base_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_base_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_int_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_int_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_int_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_int_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_peak_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_peak_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_peak_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_subpeak_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_subpeak_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_subpeak_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="gas_base_CC" to="gas (CC)"/>
                    <rewrite from="gas_base_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_base_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_int_CC" to="gas (CC)"/>
                    <rewrite from="gas_int_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_int_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_peak_CC" to="gas (CC)"/>
                    <rewrite from="gas_peak_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_peak_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_subpeak_CC" to="gas (CC)"/>
                    <rewrite from="gas_subpeak_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_subpeak_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="geo_base" to="geothermal"/>
                    <rewrite from="geo_int" to="geothermal"/>
                    <rewrite from="geo_peak" to="geothermal"/>
                    <rewrite from="geo_subpeak" to="geothermal"/>
                    <rewrite from="hydro_base" to="hydro"/>
                    <rewrite from="hydro_int" to="hydro"/>
                    <rewrite from="hydro_peak" to="hydro"/>
                    <rewrite from="hydro_subpeak" to="hydro"/>
                    <rewrite from="nuc_base_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_base_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_int_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_int_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_peak_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_peak_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_subpeak_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_subpeak_Gen III" to="Gen_III"/>
                    <rewrite from="refined liquids_base_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_base_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_base_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_int_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_int_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_int_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_peak_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_peak_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_peak_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_subpeak_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_subpeak_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_subpeak_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="CSP_base" to="CSP"/>
                    <rewrite from="CSP_base_storage" to="CSP_storage"/>
                    <rewrite from="PV_base" to="PV"/>
                    <rewrite from="PV_base_storage" to="PV_storage"/>
                    <rewrite from="CSP_int" to="CSP"/>
                    <rewrite from="CSP_int_storage" to="CSP_storage"/>
                    <rewrite from="PV_int" to="PV"/>
                    <rewrite from="PV_int_storage" to="PV_storage"/>
                    <rewrite from="CSP_peak" to="CSP"/>
                    <rewrite from="CSP_peak_storage" to="CSP_storage"/>
                    <rewrite from="PV_peak" to="PV"/>
                    <rewrite from="PV_peak_storage" to="PV_storage"/>
                    <rewrite from="CSP_subpeak" to="CSP"/>
                    <rewrite from="CSP_subpeak_storage" to="CSP_storage"/>
                    <rewrite from="PV_subpeak" to="PV"/>
                    <rewrite from="PV_subpeak_storage" to="PV_storage"/>
                    <rewrite from="wind_base" to="wind"/>
                    <rewrite from="wind_base_storage" to="wind_storage"/>
                    <rewrite from="wind_int" to="wind"/>
                    <rewrite from="wind_int_storage" to="wind_storage"/>
                    <rewrite from="wind_peak" to="wind"/>
                    <rewrite from="wind_peak_storage" to="wind_storage"/>
                    <rewrite from="wind_subpeak" to="wind"/>
                    <rewrite from="wind_subpeak_storage" to="wind_storage"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1951-1955" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1956-1960" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1961-1965" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1966-1970" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1971-1975" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1976-1980" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1981-1985" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1986-1990" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1991-1995" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1996-2000" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2001-2005" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2006-2010" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2011-2015" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire before 1950" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1951-1955" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1956-1960" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1961-1965" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1966-1970" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1971-1975" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1976-1980" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1981-1985" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1986-1990" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1991-1995" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1996-2000" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2001-2005" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2006-2010" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2011-2015" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire before 1950" to="coal (conv pul)"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' or @name='elect_td_ind'
               or @name='elect_td_trn')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen costs by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation')]/*[@type='subsector']/cost/text()</xPath>
               <comments>doesn't include rooftop PV</comments>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec gen costs by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/*[@type='subsector']/
              *[@type='technology' and not(@name='elect_td_bld')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
               *[@type='subsector' and not (@name='elect_td_bld')]/
               share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec share-weights by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
               *[@type='subsector' and not (@name='elect_td_bld')]/
               *[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water withdrawals by gen tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/
               *[@type='subsector' and not(@name='elect_td_bld')]/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_W')]/demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="base load generation" to="electricity"/>
                     <rewrite from="intermediate generation" to="electricity"/>
                     <rewrite from="subpeak generation" to="electricity"/>
                     <rewrite from="peak generation" to="electricity"/>
                  </level>
                  <level name="technology">
                    <rewrite from="biomass_base_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_base_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_base_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_base_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_int_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_int_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_int_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_int_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_peak_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_peak_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_peak_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_peak_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_subpeak_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_subpeak_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_subpeak_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_subpeak_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="coal_base_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_base_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_base_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_base_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_int_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_int_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_int_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_int_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_peak_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_peak_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_peak_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_subpeak_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_subpeak_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_subpeak_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="gas_base_CC" to="gas (CC)"/>
                    <rewrite from="gas_base_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_base_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_int_CC" to="gas (CC)"/>
                    <rewrite from="gas_int_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_int_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_peak_CC" to="gas (CC)"/>
                    <rewrite from="gas_peak_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_peak_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_subpeak_CC" to="gas (CC)"/>
                    <rewrite from="gas_subpeak_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_subpeak_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="geo_base" to="geothermal"/>
                    <rewrite from="geo_int" to="geothermal"/>
                    <rewrite from="geo_peak" to="geothermal"/>
                    <rewrite from="geo_subpeak" to="geothermal"/>
                    <rewrite from="hydro_base" to="hydro"/>
                    <rewrite from="hydro_int" to="hydro"/>
                    <rewrite from="hydro_peak" to="hydro"/>
                    <rewrite from="hydro_subpeak" to="hydro"/>
                    <rewrite from="nuc_base_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_base_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_int_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_int_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_peak_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_peak_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_subpeak_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_subpeak_Gen III" to="Gen_III"/>
                    <rewrite from="refined liquids_base_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_base_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_base_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_int_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_int_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_int_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_peak_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_peak_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_peak_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_subpeak_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_subpeak_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_subpeak_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="CSP_base" to="CSP"/>
                    <rewrite from="CSP_base_storage" to="CSP_storage"/>
                    <rewrite from="PV_base" to="PV"/>
                    <rewrite from="PV_base_storage" to="PV_storage"/>
                    <rewrite from="CSP_int" to="CSP"/>
                    <rewrite from="CSP_int_storage" to="CSP_storage"/>
                    <rewrite from="PV_int" to="PV"/>
                    <rewrite from="PV_int_storage" to="PV_storage"/>
                    <rewrite from="CSP_peak" to="CSP"/>
                    <rewrite from="CSP_peak_storage" to="CSP_storage"/>
                    <rewrite from="PV_peak" to="PV"/>
                    <rewrite from="PV_peak_storage" to="PV_storage"/>
                    <rewrite from="CSP_subpeak" to="CSP"/>
                    <rewrite from="CSP_subpeak_storage" to="CSP_storage"/>
                    <rewrite from="PV_subpeak" to="PV"/>
                    <rewrite from="PV_subpeak_storage" to="PV_storage"/>
                    <rewrite from="wind_base" to="wind"/>
                    <rewrite from="wind_base_storage" to="wind_storage"/>
                    <rewrite from="wind_int" to="wind"/>
                    <rewrite from="wind_int_storage" to="wind_storage"/>
                    <rewrite from="wind_peak" to="wind"/>
                    <rewrite from="wind_peak_storage" to="wind_storage"/>
                    <rewrite from="wind_subpeak" to="wind"/>
                    <rewrite from="wind_subpeak_storage" to="wind_storage"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1951-1955" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1956-1960" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1961-1965" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1966-1970" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1971-1975" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1976-1980" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1981-1985" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1986-1990" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1991-1995" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1996-2000" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2001-2005" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2006-2010" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2011-2015" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire before 1950" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1951-1955" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1956-1960" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1961-1965" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1966-1970" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1971-1975" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1976-1980" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1981-1985" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1986-1990" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1991-1995" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1996-2000" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2001-2005" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2006-2010" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2011-2015" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire before 1950" to="coal (conv pul)"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
            <supplyDemandQuery title="elec water consumption by gen tech">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' ]/
               *[@type='subsector' and not(@name='elect_td_bld')]/*[@type='technology']/
               *[@type='input' and (@name='water_td_elec_C')]/demand-physical/node()</xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="base load generation" to="electricity"/>
                     <rewrite from="intermediate generation" to="electricity"/>
                     <rewrite from="subpeak generation" to="electricity"/>
                     <rewrite from="peak generation" to="electricity"/>
                  </level>
                  <level name="technology">
                    <rewrite from="biomass_base_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_base_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_base_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_base_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_int_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_int_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_int_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_int_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_peak_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_peak_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_peak_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_peak_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="biomass_subpeak_conv" to="biomass (conv)"/>
                    <rewrite from="biomass_subpeak_conv_CCS" to="biomass (conv CCS)"/>
                    <rewrite from="biomass_subpeak_IGCC" to="biomass (IGCC)"/>
                    <rewrite from="biomass_subpeak_IGCC_CCS" to="biomass (IGCC CCS)"/>
                    <rewrite from="coal_base_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_base_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_base_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_base_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_int_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_int_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_int_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_int_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_peak_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_peak_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_peak_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_peak_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="coal_subpeak_conv pul" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_conv pul_CCS" to="coal (conv pul CCS)"/>
                    <rewrite from="coal_subpeak_conv pul_fast_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_conv pul_slow_retire" to="coal (conv pul)"/>
                    <rewrite from="coal_subpeak_IGCC" to="coal (IGCC)"/>
                    <rewrite from="coal_subpeak_IGCC_CCS" to="coal (IGCC CCS)"/>
                    <rewrite from="gas_base_CC" to="gas (CC)"/>
                    <rewrite from="gas_base_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_base_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_int_CC" to="gas (CC)"/>
                    <rewrite from="gas_int_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_int_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_peak_CC" to="gas (CC)"/>
                    <rewrite from="gas_peak_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_peak_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="gas_subpeak_CC" to="gas (CC)"/>
                    <rewrite from="gas_subpeak_CC_CCS" to="gas (CC CCS)"/>
                    <rewrite from="gas_subpeak_steam/CT" to="gas (steam/CT)"/>
                    <rewrite from="geo_base" to="geothermal"/>
                    <rewrite from="geo_int" to="geothermal"/>
                    <rewrite from="geo_peak" to="geothermal"/>
                    <rewrite from="geo_subpeak" to="geothermal"/>
                    <rewrite from="hydro_base" to="hydro"/>
                    <rewrite from="hydro_int" to="hydro"/>
                    <rewrite from="hydro_peak" to="hydro"/>
                    <rewrite from="hydro_subpeak" to="hydro"/>
                    <rewrite from="nuc_base_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_base_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_int_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_int_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_peak_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_peak_Gen III" to="Gen_III"/>
                    <rewrite from="nuc_subpeak_Gen II" to="Gen_II_LWR"/>
                    <rewrite from="nuc_subpeak_Gen III" to="Gen_III"/>
                    <rewrite from="refined liquids_base_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_base_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_base_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_int_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_int_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_int_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_peak_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_peak_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_peak_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="refined liquids_subpeak_CC" to="refined liquids (CC)"/>
                    <rewrite from="refined liquids_subpeak_CC_CCS" to="refined liquids (CC CCS)"/>
                    <rewrite from="refined liquids_subpeak_steam/CT" to="refined liquids (steam/CT)"/>
                    <rewrite from="CSP_base" to="CSP"/>
                    <rewrite from="CSP_base_storage" to="CSP_storage"/>
                    <rewrite from="PV_base" to="PV"/>
                    <rewrite from="PV_base_storage" to="PV_storage"/>
                    <rewrite from="CSP_int" to="CSP"/>
                    <rewrite from="CSP_int_storage" to="CSP_storage"/>
                    <rewrite from="PV_int" to="PV"/>
                    <rewrite from="PV_int_storage" to="PV_storage"/>
                    <rewrite from="CSP_peak" to="CSP"/>
                    <rewrite from="CSP_peak_storage" to="CSP_storage"/>
                    <rewrite from="PV_peak" to="PV"/>
                    <rewrite from="PV_peak_storage" to="PV_storage"/>
                    <rewrite from="CSP_subpeak" to="CSP"/>
                    <rewrite from="CSP_subpeak_storage" to="CSP_storage"/>
                    <rewrite from="PV_subpeak" to="PV"/>
                    <rewrite from="PV_subpeak_storage" to="PV_storage"/>
                    <rewrite from="wind_base" to="wind"/>
                    <rewrite from="wind_base_storage" to="wind_storage"/>
                    <rewrite from="wind_int" to="wind"/>
                    <rewrite from="wind_int_storage" to="wind_storage"/>
                    <rewrite from="wind_peak" to="wind"/>
                    <rewrite from="wind_peak_storage" to="wind_storage"/>
                    <rewrite from="wind_subpeak" to="wind"/>
                    <rewrite from="wind_subpeak_storage" to="wind_storage"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1951-1955" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1956-1960" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1961-1965" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1966-1970" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1971-1975" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1976-1980" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1981-1985" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1986-1990" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1991-1995" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 1996-2000" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2001-2005" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2006-2010" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire 2011-2015" to="coal (conv pul)"/>
                    <rewrite from="coal_base_conv pul_slow_retire before 1950" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1951-1955" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1956-1960" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1961-1965" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1966-1970" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1971-1975" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1976-1980" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1981-1985" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1986-1990" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1991-1995" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 1996-2000" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2001-2005" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2006-2010" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire 2011-2015" to="coal (conv pul)"/>
                    <rewrite from="coal_int_conv pul_slow_retire before 1950" to="coal (conv pul)"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
         </queryGroup>
         <queryGroup name="refining">
            <supplyDemandQuery title="refined liquids production by region">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]//
               output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and 
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/
               *[@type='subsector']//
               output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and 
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and 
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids production by tech (new)">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and 
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output[
               @vintage=parent::*/parent::*/@year]/node()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refinery inputs by tech (energy and feedstocks)">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and 
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids' or 
               @name='regional oil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol')]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and not(contains(@name,'water'))]/demand-physical/node()</xPath>
               <comments>includes passthrough sectors for refining</comments>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and 
               (@name='oil refining' or @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids' or 
               @name='refined liquids enduse' or @name='refined liquids industrial')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids costs by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='oil refining' or 
               @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/*[@type='subsector']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refined liquids costs by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='oil refining' or 
               @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/*[@type='subsector']/*[@type='technology']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refining and oil share-weights by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">share-weight</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='oil refining' or 
               @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids' or @name='regional oil')]/
               *[@type='subsector']/share-weight/text()</xPath>
               <comments/>
            </supplyDemandQuery>
            <supplyDemandQuery title="refining share-weights by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">technology</axis2>
               <xPath buildList="true" dataName="share-weight" group="false" sumAll="false">*[@type='sector' and (@name='oil refining' or 
               @name='biomass liquids' or @name='gas to liquids' or @name='coal to liquids')]/*[@type='subsector']/
               *[@type='technology']/share-weight/node()</xPath>
               <comments/>
            </supplyDemandQuery>
         </queryGroup>
      </queryGroup>
      <queryGroup name="end use sectors">
        <queryGroup name="total end use sectors">
          <supplyDemandQuery title="total final energy by aggregate sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="sector">
                  <rewrite from="trn_pass_road_bus" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV" to="transportation"/>
                  <rewrite from="trn_freight" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
                  <rewrite from="N fertilizer" to="industry"/>
                  <rewrite from="resid heating" to="building"/>
                  <rewrite from="industrial feedstocks" to="industry"/>
                  <rewrite from="comm heating" to="building"/>
                  <rewrite from="trn_aviation_intl" to="transportation"/>
                  <rewrite from="industrial energy use" to="industry"/>
                  <rewrite from="comm cooling" to="building"/>
                  <rewrite from="trn_shipping_intl" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
                  <rewrite from="trn_freight_road" to="transportation"/>
                  <rewrite from="comm others" to="building"/>
                  <rewrite from="trn_pass" to="transportation"/>
                  <rewrite from="process heat cement" to="industry"/>
                  <rewrite from="resid cooling" to="building"/>
                  <rewrite from="cement" to="industry"/>
                  <rewrite from="resid others" to="building"/>
                  <rewrite from="trn_pass_road" to="transportation"/>
                  <rewrite from="resid hot water" to="building"/>
                  <rewrite from="resid lighting" to="building"/>
                  <rewrite from="resid refrigerators" to="building"/>
                  <rewrite from="resid freezers" to="building"/>
                  <rewrite from="resid dishwashers" to="building"/>
                  <rewrite from="resid cooking" to="building"/>
                  <rewrite from="resid clothes dryers" to="building"/>
                  <rewrite from="resid clothes washers" to="building"/>
                  <rewrite from="resid televisions" to="building"/>
                  <rewrite from="resid computers" to="building"/>
                  <rewrite from="resid furnace fans" to="building"/>
                  <rewrite from="resid other" to="building"/>
                  <rewrite from="comm hot water" to="building"/>
                  <rewrite from="comm ventilation" to="building"/>
                  <rewrite from="comm cooking" to="building"/>
                  <rewrite from="comm lighting" to="building"/>
                  <rewrite from="comm refrigeration" to="building"/>
                  <rewrite from="comm office" to="building"/>
                  <rewrite from="comm other" to="building"/>
                  <rewrite from="comm non-building" to="building"/>
               </level>
            </labelRewriteList>
          </supplyDemandQuery>
        </queryGroup>
      </queryGroup>
   </queryGroup>
</queries>
