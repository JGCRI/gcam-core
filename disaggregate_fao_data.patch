From 47bce099a5c385ce2cedf33fb49f7b71d322a567 Mon Sep 17 00:00:00 2001
From: "Kyle, G Page" <pkyle@pnnl.gov>
Date: Tue, 21 Aug 2018 00:33:06 -0400
Subject: [PATCH 1/2] first cut at disaggregating fao data to basin prior to
 aggregating by region. * drops about 0.5% of observations (region x crop x
 glu) * model crashes in 2015 from a negative profit land leaf

---
 input/gcamdata/R/zchunk_L121.nonco2_awb_R_S_T_Y.R  |  10 +-
 input/gcamdata/R/zchunk_L122.ghg_agr_R_S_T_Y.R     |  14 +-
 input/gcamdata/R/zchunk_L123.bcoc_awb_R_S_T_Y.R    |  12 +-
 .../zchunk_L2012.ag_For_Past_bio_input_irr_mgmt.R  |  12 +-
 .../R/zchunk_L2042.resbio_input_irr_mgmt.R         |  18 +--
 input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R       | 155 +++++++++++++++---
 input/gcamdata/R/zchunk_LA102.ag_LDS_R_C_GLU.R     | 129 ---------------
 input/gcamdata/R/zchunk_LA103.ag_R_C_Y_GLU.R       | 175 ---------------------
 input/gcamdata/R/zchunk_LA108.ag_Feed_R_C_Y.R      |  14 +-
 input/gcamdata/R/zchunk_LB109.ag_an_ALL_R_C_Y.R    |  10 +-
 .../R/zchunk_LB112.ag_prodchange_R_C_Y_GLU.R       |  16 +-
 .../gcamdata/R/zchunk_LB122.LC_R_Cropland_Yh_GLU.R |  40 ++---
 .../R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R         |  10 +-
 .../gcamdata/R/zchunk_LB142.ag_Fert_IO_R_C_Y_GLU.R |  10 +-
 input/gcamdata/R/zchunk_LB161.ag_R_C_Y_GLU_irr.R   |  20 +--
 .../man/module_aglu_L2042.resbio_input_irr_mgmt.Rd |   2 +-
 .../gcamdata/man/module_aglu_LA101.ag_FAO_R_C_Y.Rd |   5 +-
 .../man/module_aglu_LA102.ag_LDS_R_C_GLU.Rd        |  31 ----
 .../gcamdata/man/module_aglu_LA103.ag_R_C_Y_GLU.Rd |  31 ----
 19 files changed, 227 insertions(+), 487 deletions(-)
 delete mode 100644 input/gcamdata/R/zchunk_LA102.ag_LDS_R_C_GLU.R
 delete mode 100644 input/gcamdata/R/zchunk_LA103.ag_R_C_Y_GLU.R
 delete mode 100644 input/gcamdata/man/module_aglu_LA102.ag_LDS_R_C_GLU.Rd
 delete mode 100644 input/gcamdata/man/module_aglu_LA103.ag_R_C_Y_GLU.Rd

diff --git a/input/gcamdata/R/zchunk_L121.nonco2_awb_R_S_T_Y.R b/input/gcamdata/R/zchunk_L121.nonco2_awb_R_S_T_Y.R
index a7ab270..cd24a42 100644
--- a/input/gcamdata/R/zchunk_L121.nonco2_awb_R_S_T_Y.R
+++ b/input/gcamdata/R/zchunk_L121.nonco2_awb_R_S_T_Y.R
@@ -17,7 +17,7 @@ module_emissions_L121.nonco2_awb_R_S_T_Y <- function(command, ...) {
   if(command == driver.DECLARE_INPUTS) {
     return(c(FILE = "common/iso_GCAM_regID",
              FILE = "emissions/EDGAR/EDGAR_sector",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L111.ag_resbio_R_C",
              FILE = "emissions/EDGAR/EDGAR_SO2",
              FILE = "emissions/EDGAR/EDGAR_CO",
@@ -42,7 +42,7 @@ module_emissions_L121.nonco2_awb_R_S_T_Y <- function(command, ...) {
     # Load required inputs
     iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
     EDGAR_sector <- get_data(all_data, "emissions/EDGAR/EDGAR_sector")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L111.ag_resbio_R_C <- get_data(all_data, "L111.ag_resbio_R_C")
     EDGAR_SO2 <- get_data(all_data, "emissions/EDGAR/EDGAR_SO2")
     EDGAR_CO <- get_data(all_data, "emissions/EDGAR/EDGAR_CO")
@@ -58,7 +58,7 @@ module_emissions_L121.nonco2_awb_R_S_T_Y <- function(command, ...) {
     # estimated from production, harvest index, and water content
 
     # Match weighted average residue biomass parameters with crop prodcution.
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       left_join(L111.ag_resbio_R_C, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
       select(-c(ErosCtrl_tHa, ResEnergy_GJt, Root_Shoot)) ->
       L121.ag_ExcessDryBiomass_Mt_R_C_Y_GLU
@@ -167,7 +167,7 @@ module_emissions_L121.nonco2_awb_R_S_T_Y <- function(command, ...) {
                      "emissions/EDGAR/EDGAR_sector", "emissions/EDGAR/EDGAR_SO2", "emissions/EDGAR/EDGAR_CO",
                      "emissions/EDGAR/EDGAR_NOx", "emissions/EDGAR/EDGAR_NMVOC", "emissions/EDGAR/EDGAR_CH4",
                      "emissions/EDGAR/EDGAR_N2O", "emissions/EDGAR/EDGAR_NH3",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU", "L111.ag_resbio_R_C") ->
+                     "L101.ag_Prod_Mt_R_C_Y_GLU", "L111.ag_resbio_R_C") ->
       L121.AWBshare_R_C_Y_GLU
 
     L121.nonco2_tg_R_awb_C_Y_GLU %>%
@@ -180,7 +180,7 @@ module_emissions_L121.nonco2_awb_R_S_T_Y <- function(command, ...) {
                      "emissions/EDGAR/EDGAR_sector", "emissions/EDGAR/EDGAR_SO2", "emissions/EDGAR/EDGAR_CO",
                      "emissions/EDGAR/EDGAR_NOx", "emissions/EDGAR/EDGAR_NMVOC", "emissions/EDGAR/EDGAR_CH4",
                      "emissions/EDGAR/EDGAR_N2O", "emissions/EDGAR/EDGAR_NH3",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU", "L111.ag_resbio_R_C") ->
+                     "L101.ag_Prod_Mt_R_C_Y_GLU", "L111.ag_resbio_R_C") ->
       L121.nonco2_tg_R_awb_C_Y_GLU
 
     return_data(L121.AWBshare_R_C_Y_GLU, L121.nonco2_tg_R_awb_C_Y_GLU)
diff --git a/input/gcamdata/R/zchunk_L122.ghg_agr_R_S_T_Y.R b/input/gcamdata/R/zchunk_L122.ghg_agr_R_S_T_Y.R
index 9a687b2..1b7c2a7 100644
--- a/input/gcamdata/R/zchunk_L122.ghg_agr_R_S_T_Y.R
+++ b/input/gcamdata/R/zchunk_L122.ghg_agr_R_S_T_Y.R
@@ -19,7 +19,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
   if(command == driver.DECLARE_INPUTS) {
     return(c(FILE = "common/iso_GCAM_regID",
              FILE = "emissions/EDGAR/EDGAR_sector",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L122.LC_bm2_R_HarvCropLand_C_Yh_GLU",
              "L142.ag_Fert_IO_R_C_Y_GLU",
              FILE = "emissions/EDGAR/EDGAR_CH4",
@@ -42,7 +42,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
     # Load required inputs
     iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
     EDGAR_sector <- get_data(all_data, "emissions/EDGAR/EDGAR_sector")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L122.LC_bm2_R_HarvCropLand_C_Yh_GLU <- get_data(all_data, "L122.LC_bm2_R_HarvCropLand_C_Yh_GLU")
     L142.ag_Fert_IO_R_C_Y_GLU <- get_data(all_data, "L142.ag_Fert_IO_R_C_Y_GLU")
     EDGAR_CH4 <- get_data(all_data, "emissions/EDGAR/EDGAR_CH4") %>%
@@ -71,7 +71,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
       mutate(crop_area_share = value / crop_area_total)
 
     # Production shares (region/GLU/crop within region/crop)
-    L122.ProdGLUshare_R_C_Y_GLU <- L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L122.ProdGLUshare_R_C_Y_GLU <- L101.ag_Prod_Mt_R_C_Y_GLU %>%
       filter(year %in% HISTORICAL_YEARS) %>%
       group_by(GCAM_region_ID, GCAM_commodity, year) %>%
       # Production by crop, region, and year
@@ -112,7 +112,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
       filter(sector == "rice")
 
     # Compute share of rice production by GLU in each region / year
-    L122.ag_Prod_Mt_R_rice_Y_GLU <- L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L122.ag_Prod_Mt_R_rice_Y_GLU <- L101.ag_Prod_Mt_R_C_Y_GLU %>%
       filter(GCAM_commodity == "Rice", year %in% emissions.EDGAR_YEARS) %>%
       group_by(GCAM_region_ID, GCAM_commodity, year) %>%
       # Total production by region, commodity, and year for calculating share
@@ -144,7 +144,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
       filter(sector == "fertilizer")
 
     # Compute fertilizer by crop
-    L122.fert_Mt_R_C_Y_GLU <- L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L122.fert_Mt_R_C_Y_GLU <- L101.ag_Prod_Mt_R_C_Y_GLU %>%
       filter(year %in% emissions.EDGAR_YEARS) %>%
       rename(ag_production = value) %>%
       left_join_error_no_match(L142.ag_Fert_IO_R_C_Y_GLU %>%
@@ -177,7 +177,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
       add_units("unitless share") %>%
       add_comments("Multiply region/crop area shares by region/crop/GLU production shares") %>%
       add_legacy_name("L122.EmissShare_R_C_Y_GLU") %>%
-      add_precursors("L103.ag_Prod_Mt_R_C_Y_GLU", "L122.LC_bm2_R_HarvCropLand_C_Yh_GLU") ->
+      add_precursors("L101.ag_Prod_Mt_R_C_Y_GLU", "L122.LC_bm2_R_HarvCropLand_C_Yh_GLU") ->
       L122.EmissShare_R_C_Y_GLU
 
     L122.ghg_tg_R_agr_C_Y_GLU %>%
@@ -186,7 +186,7 @@ module_emissions_L122.ghg_agr_R_S_T_Y <- function(command, ...) {
       add_comments("EDGAR emissions shared out by crop production") %>%
       add_legacy_name("L122.ghg_tg_R_agr_C_Y_GLU") %>%
       add_precursors("common/iso_GCAM_regID", "emissions/EDGAR/EDGAR_sector",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU", "L142.ag_Fert_IO_R_C_Y_GLU",
+                     "L101.ag_Prod_Mt_R_C_Y_GLU", "L142.ag_Fert_IO_R_C_Y_GLU",
                      "emissions/EDGAR/EDGAR_CH4", "emissions/EDGAR/EDGAR_N2O", "emissions/EDGAR/EDGAR_NH3", "emissions/EDGAR/EDGAR_NOx") ->
       L122.ghg_tg_R_agr_C_Y_GLU
 
diff --git a/input/gcamdata/R/zchunk_L123.bcoc_awb_R_S_T_Y.R b/input/gcamdata/R/zchunk_L123.bcoc_awb_R_S_T_Y.R
index 6cfea1c..0323463 100644
--- a/input/gcamdata/R/zchunk_L123.bcoc_awb_R_S_T_Y.R
+++ b/input/gcamdata/R/zchunk_L123.bcoc_awb_R_S_T_Y.R
@@ -16,7 +16,7 @@
 module_emissions_L123.bcoc_awb_R_S_T_Y <- function(command, ...) {
   if(command == driver.DECLARE_INPUTS) {
     return(c(FILE = "common/iso_GCAM_regID",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L121.AWBshare_R_C_Y_GLU",
              FILE = "emissions/RCP_BC_2000",
              FILE = "emissions/RCP_OC_2000"))
@@ -31,7 +31,7 @@ module_emissions_L123.bcoc_awb_R_S_T_Y <- function(command, ...) {
 
     # Load required inputs
     iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L121.AWBshare_R_C_Y_GLU <- get_data(all_data, "L121.AWBshare_R_C_Y_GLU")
     RCP_BC_2000 <- get_data(all_data, "emissions/RCP_BC_2000")
     RCP_OC_2000 <- get_data(all_data, "emissions/RCP_OC_2000")
@@ -57,9 +57,9 @@ module_emissions_L123.bcoc_awb_R_S_T_Y <- function(command, ...) {
       BCOC_AWB_2000
 
     # Extract only 2000 data from ag production data
-    filter(L103.ag_Prod_Mt_R_C_Y_GLU, year == 2000) %>%
+    filter(L101.ag_Prod_Mt_R_C_Y_GLU, year == 2000) %>%
       select(-year)  ->
-      L103.ag_Prod_Mt_R_C_Y_GLU_2000
+      L101.ag_Prod_Mt_R_C_Y_GLU_2000
 
     # Allocate aggreate regional year 2000 AWB emissions into GCAM crop and GLU
     # This is done using shares from L121.AWBshare_R_C_Y_GLU, which is calculated in another chunk
@@ -72,7 +72,7 @@ module_emissions_L123.bcoc_awb_R_S_T_Y <- function(command, ...) {
       # by the share for each individual GCAM technology
       mutate(awb_emission = AWB_emiss_share * awb) %>%
       # Add production data
-      left_join_error_no_match(L103.ag_Prod_Mt_R_C_Y_GLU_2000, by = c("GCAM_region_ID", "GCAM_commodity", "GLU")) %>%
+      left_join_error_no_match(L101.ag_Prod_Mt_R_C_Y_GLU_2000, by = c("GCAM_region_ID", "GCAM_commodity", "GLU")) %>%
       # Calculate emission factor, which is
       mutate(emfact = awb_emission / value) %>%
       select(-awb_emission, -value, -AWB_emiss_share, -awb) %>%
@@ -89,7 +89,7 @@ module_emissions_L123.bcoc_awb_R_S_T_Y <- function(command, ...) {
       add_precursors("common/iso_GCAM_regID",
                      "emissions/RCP_BC_2000",
                      "emissions/RCP_OC_2000",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU",
+                     "L101.ag_Prod_Mt_R_C_Y_GLU",
                      "L121.AWBshare_R_C_Y_GLU") ->
       L123.bcoc_tgmt_R_awb_2000
 
diff --git a/input/gcamdata/R/zchunk_L2012.ag_For_Past_bio_input_irr_mgmt.R b/input/gcamdata/R/zchunk_L2012.ag_For_Past_bio_input_irr_mgmt.R
index 6279be4..59328bc 100644
--- a/input/gcamdata/R/zchunk_L2012.ag_For_Past_bio_input_irr_mgmt.R
+++ b/input/gcamdata/R/zchunk_L2012.ag_For_Past_bio_input_irr_mgmt.R
@@ -21,7 +21,7 @@ module_aglu_L2012.ag_For_Past_bio_input_irr_mgmt <- function(command, ...) {
              FILE = "water/basin_to_country_mapping",
              FILE = "aglu/A_agSupplySector",
              FILE = "aglu/A_agSupplySubsector",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L113.ag_bioYield_GJm2_R_GLU",
              "L122.ag_HA_to_CropLand_R_Y_GLU",
              "L123.ag_Prod_Mt_R_Past_Y_GLU",
@@ -58,7 +58,7 @@ module_aglu_L2012.ag_For_Past_bio_input_irr_mgmt <- function(command, ...) {
     basin_to_country_mapping <- get_data(all_data, "water/basin_to_country_mapping")
     A_AgSupplySector <- get_data(all_data, "aglu/A_agSupplySector")
     A_AgSupplySubsector <- get_data(all_data, "aglu/A_agSupplySubsector")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L113.ag_bioYield_GJm2_R_GLU <- get_data(all_data, "L113.ag_bioYield_GJm2_R_GLU")
     L122.ag_HA_to_CropLand_R_Y_GLU <- get_data(all_data, "L122.ag_HA_to_CropLand_R_Y_GLU")
     L123.ag_Prod_Mt_R_Past_Y_GLU <- get_data(all_data, "L123.ag_Prod_Mt_R_Past_Y_GLU")
@@ -91,7 +91,7 @@ module_aglu_L2012.ag_For_Past_bio_input_irr_mgmt <- function(command, ...) {
     # At the subsector (production) level, only region x GLU combinations that actually exist are created.
     # So start with template production tables of available region x commodity x glu for all commodities.
     # First, biograss: available anywhere that has any crop production at all
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       select(GCAM_region_ID, GLU) %>%
       unique %>%
       mutate(GCAM_commodity = "biomass_grass") ->
@@ -103,7 +103,7 @@ module_aglu_L2012.ag_For_Past_bio_input_irr_mgmt <- function(command, ...) {
       mutate(GCAM_commodity = "biomass_tree") ->
       L201.R_C_GLU_biotree
     # Third, bind Ag commodties, forest, pasture and biomass all together
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       bind_rows(L123.For_Prod_bm3_R_Y_GLU, L123.ag_Prod_Mt_R_Past_Y_GLU) %>%
       select(GCAM_region_ID, GCAM_commodity, GLU) %>%
       unique %>%
@@ -222,7 +222,7 @@ module_aglu_L2012.ag_For_Past_bio_input_irr_mgmt <- function(command, ...) {
 
     # Paste in harvested-area-to-cropland only for agriculture commodities, repeat by irr/rfd and mgmt techs
     L2012.AgSupplySubsector %>%
-      semi_join(L103.ag_Prod_Mt_R_C_Y_GLU, by = c("AgSupplySector" = "GCAM_commodity")) %>%
+      semi_join(L101.ag_Prod_Mt_R_C_Y_GLU, by = c("AgSupplySector" = "GCAM_commodity")) %>%
       # Copy to all model years
       repeat_add_columns(tibble(year = MODEL_YEARS)) %>%
       # Separate the AgSupplySubsector variable to get GLU names for matching in the harvest data
@@ -404,7 +404,7 @@ module_aglu_L2012.ag_For_Past_bio_input_irr_mgmt <- function(command, ...) {
       add_precursors("common/GCAM_region_names",
                      "water/basin_to_country_mapping",
                      "aglu/A_agSupplySubsector",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU",
+                     "L101.ag_Prod_Mt_R_C_Y_GLU",
                      "L123.ag_Prod_Mt_R_Past_Y_GLU",
                      "L123.For_Prod_bm3_R_Y_GLU") ->
       L2012.AgSupplySubsector
diff --git a/input/gcamdata/R/zchunk_L2042.resbio_input_irr_mgmt.R b/input/gcamdata/R/zchunk_L2042.resbio_input_irr_mgmt.R
index 9bf0a68..91294bc 100644
--- a/input/gcamdata/R/zchunk_L2042.resbio_input_irr_mgmt.R
+++ b/input/gcamdata/R/zchunk_L2042.resbio_input_irr_mgmt.R
@@ -22,7 +22,7 @@
 #' A_resbio_curves and then, in specified calibration years BASE_YEARS, replaced by fractions in  A_bio_frac_prod_R to form the table of
 #' Mill resbio supply curves for each region and year.
 #'
-#' For Agriculture Residue Biomass, each GCAM region-commodity-GLU combination in L103.ag_Prod_Mt_R_C_Y_GLU is converted to a
+#' For Agriculture Residue Biomass, each GCAM region-commodity-GLU combination in L101.ag_Prod_Mt_R_C_Y_GLU is converted to a
 #' region-supplySector-supplySubsector-ProductionTech combination, and parameters from L111.ag_resbio_R_C are joined and rounded
 #' for each region-supplySector. These parameters are then repeated for model years, irrigation types, and management technology levels.
 #' Finally, for each region-supplySector-supplySubsector-ProductionTech-irrigation-tech combination in this table, base
@@ -39,7 +39,7 @@ module_aglu_L2042.resbio_input_irr_mgmt <- function(command, ...) {
              FILE = "aglu/A_resbio_curves",
              FILE = "aglu/A_bio_frac_prod_R",
              "L111.ag_resbio_R_C",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L123.For_Prod_bm3_R_Y_GLU"))
   } else if(command == driver.DECLARE_OUTPUTS) {
     return(c("L2042.AgResBio_For",
@@ -66,14 +66,14 @@ module_aglu_L2042.resbio_input_irr_mgmt <- function(command, ...) {
     A_resbio_curves <- get_data(all_data, "aglu/A_resbio_curves")
     A_bio_frac_prod_R <- get_data(all_data, "aglu/A_bio_frac_prod_R")
     L111.ag_resbio_R_C <- get_data(all_data, "L111.ag_resbio_R_C")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L123.For_Prod_bm3_R_Y_GLU <- get_data(all_data, "L123.For_Prod_bm3_R_Y_GLU")
 
     # the following lines convert basin identification from the current GLU### level 1 names to the
     # level 2 names.
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       replace_GLU(map = basin_to_country_mapping) ->
-      L103.ag_Prod_Mt_R_C_Y_GLU
+      L101.ag_Prod_Mt_R_C_Y_GLU
 
     L123.For_Prod_bm3_R_Y_GLU %>%
       replace_GLU(map = basin_to_country_mapping) ->
@@ -195,7 +195,7 @@ module_aglu_L2042.resbio_input_irr_mgmt <- function(command, ...) {
 
     # AGRICULTURE RESIDUE BIO
     # 4. Form a table of Agricultural Residue Biomass Paramters by region-glu-year
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       select(GCAM_region_ID, GCAM_commodity, GLU) %>%
       distinct %>%
       left_join_error_no_match(GCAM_region_names, by = "GCAM_region_ID") %>%
@@ -282,7 +282,7 @@ module_aglu_L2042.resbio_input_irr_mgmt <- function(command, ...) {
     L2042.AgResBio_ag_irr_mgmt %>%
       add_title("Agriculture residue biomass parameters") %>%
       add_units("Varies") %>%
-      add_comments("Each GCAM region-commodity-GLU combination in L103.ag_Prod_Mt_R_C_Y_GLU is converted ") %>%
+      add_comments("Each GCAM region-commodity-GLU combination in L101.ag_Prod_Mt_R_C_Y_GLU is converted ") %>%
       add_comments("to a region-supplySector-supplySubsector-ProductionTech combination, and parameters from L111.ag_resbio_R_C") %>%
       add_comments("are joined and rounded for each region-supplySector. These parameters are then repeated for model years, ") %>%
       add_comments("irrigation types, and management technology levels.") %>%
@@ -293,7 +293,7 @@ module_aglu_L2042.resbio_input_irr_mgmt <- function(command, ...) {
                      "aglu/A_resbio_curves",
                      "aglu/A_bio_frac_prod_R",
                      "L111.ag_resbio_R_C",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU") ->
+                     "L101.ag_Prod_Mt_R_C_Y_GLU") ->
       L2042.AgResBio_ag_irr_mgmt
     L2042.AgResBioCurve_ag_irr_mgmt %>%
       add_title("Agriculture residue biomass supply curves") %>%
@@ -307,7 +307,7 @@ module_aglu_L2042.resbio_input_irr_mgmt <- function(command, ...) {
                      "aglu/A_resbio_curves",
                      "aglu/A_bio_frac_prod_R",
                      "L111.ag_resbio_R_C",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU") %>%
+                     "L101.ag_Prod_Mt_R_C_Y_GLU") %>%
       add_flags(FLAG_PROTECT_FLOAT) ->
       L2042.AgResBioCurve_ag_irr_mgmt
 
diff --git a/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R b/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R
index 5238a84..98d6431 100644
--- a/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R
+++ b/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R
@@ -13,10 +13,13 @@
 #' and harvested area data up to GCAM commodities and GCAM regions. Data is converted
 #' from FAO units (tons, hectares) to GCAM units (Mt, Pcal, billion km2). Note that
 #' FAO's alfalfa production in the USA is divided by 4 "for consistency with USDA".
+#' Note (August 2018 GPK revision) - The FAO production and harvested area are disaggregated
+#' to basin PRIOR to aggregation by GCAM region. This reduces the bias from using a single
+#' year (around 2000) to disaggregate to basin, in multi-country regions.
 #' @importFrom assertthat assert_that
 #' @importFrom dplyr filter mutate select left_join
 #' @importFrom tidyr gather spread complete
-#' @author KVC March 2017
+#' @author KVC March 2017 (revised August 2018 by GPK)
 module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
   if(command == driver.DECLARE_INPUTS) {
     return(c(FILE = "common/iso_GCAM_regID",
@@ -24,13 +27,19 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
              FILE = "aglu/FAO/FAO_ag_items_cal_SUA",
              "L100.FAO_ag_Food_t",
              "L100.FAO_ag_HA_ha",
-             "L100.FAO_ag_Prod_t"))
-  } else if(command == driver.DECLARE_OUTPUTS) {
+             "L100.FAO_ag_Prod_t",
+             "L100.LDS_ag_HA_ha",
+             "L100.LDS_ag_prod_t"))
+    } else if(command == driver.DECLARE_OUTPUTS) {
     return(c("L101.ag_Food_Mt_R_C_Y",
              "L101.ag_Food_Pcal_R_C_Y",
              "L101.ag_kcalg_R_C_Y",
+             "L101.ag_HA_bm2_R_C_GLU",
              "L101.ag_HA_bm2_R_C_Y",
-             "L101.ag_Prod_Mt_R_C_Y"))
+             "L101.ag_HA_bm2_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Yield_kgm2_R_C_Y_GLU"))
   } else if(command == driver.MAKE) {
 
     all_data <- list(...)[[1]]
@@ -46,6 +55,8 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
     L100.FAO_ag_Food_t <- get_data(all_data, "L100.FAO_ag_Food_t")
     L100.FAO_ag_HA_ha <- get_data(all_data, "L100.FAO_ag_HA_ha")
     L100.FAO_ag_Prod_t <- get_data(all_data, "L100.FAO_ag_Prod_t")
+    L100.LDS_ag_HA_ha <- get_data(all_data, "L100.LDS_ag_HA_ha")
+    L100.LDS_ag_prod_t <- get_data(all_data, "L100.LDS_ag_prod_t")
 
     # Process FAO food consumption data (tons): remove unnecessary columns, convert units, aggregate to region and commodity
     L100.FAO_ag_Food_t %>%
@@ -105,37 +116,91 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
       mutate(production = if_else(harvested.area == 0, 0, production)) ->                                       # Set production to zero if harvested area is zero
       FAO_PRODSTAT_MERGED
 
-    # Process FAO production data: convert units, aggregate to region and commodity
-    FAO_PRODSTAT_MERGED %>%
-      select(iso, item, year, production) %>%                                                                   # Select relevant columns (not harvested.area)
+    # Next we downscale the data from countries to basins, using the basin-within-country shares
+    # of each crop in the Monfreda (pre-processed by LDS) data on harvested area and production
+    LDS_ag_SHARES <-
+      left_join_error_no_match(L100.LDS_ag_HA_ha, L100.LDS_ag_prod_t, by = c("iso", "GLU", "GTAP_crop")) %>%
+      rename(harvested.area = value.x,
+             production = value.y) %>%
+      left_join(FAO_ag_items_PRODSTAT[c("item", "GTAP_crop")], by = "GTAP_crop") %>%
+      drop_na() %>%   # crops in the Monfreda/GTAP dataset but not FAOSTAT are dropped (BrdBeanGreen and KapokFibre)
+      group_by(iso, GTAP_crop) %>%
+      mutate(HA_share_GLU = harvested.area / sum(harvested.area),
+             prod_share_GLU = production / sum(production)) %>%
+      ungroup() %>%
+      select(iso, GLU, item, HA_share_GLU, prod_share_GLU)
+
+    # Write out the Monfreda/LDS harvested area by GCAM region, commodity, and GLU for the ~2000 base year
+    L101.ag_HA_bm2_R_C_GLU <- L100.LDS_ag_HA_ha %>%
+      left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                                           # Map in ISO codes
+      left_join(unique(FAO_ag_items_PRODSTAT[ c("GTAP_crop", "GCAM_commodity")]), by = "GTAP_crop") %>%                  # Map in GCAM commodities
+      filter(!is.na(GCAM_commodity)) %>%                                                                                 # Remove commodities not included in GCAM
+      group_by(GCAM_region_ID, GCAM_commodity, GLU) %>%                                                                  # Aggregate by GCAM regions, commodities, GLU
+      summarise(value = sum(value)) %>%
+      mutate(value = value * CONV_HA_BM2) %>%                                                                            # convert from hectares to billion square meters
+      ungroup()
+
+
+    FAO_PRODSTAT_DOWNSCALED <- FAO_PRODSTAT_MERGED %>%
+      full_join(LDS_ag_SHARES, by = c("iso", "item")) %>%
+      drop_na() %>%   # zeroes are not written to the LDS databases, and return missing values here
+      mutate(harvested.area = harvested.area * HA_share_GLU,
+             production = production * prod_share_GLU)
+
+    # Process FAO production data: convert units, aggregate to region, commodity, and GLU
+    FAO_PRODSTAT_DOWNSCALED %>%
+      select(iso, item, GLU, year, production) %>%                                                                   # Select relevant columns (not harvested.area)
       rename(value = production) %>%                                                                            # Rename column since tests are expecting "value"
       left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                                 # Map in ISO codes
       left_join(unique(FAO_ag_items_PRODSTAT[ c("item", "GCAM_commodity")]), by = "item") %>%                  # Map in GCAM commodities
-      filter(!is.na(GCAM_commodity)) %>%                                                                        # Remove commodities not included in GCAM      mutate(value = value * CONV_HA_BM2) %>%                                                                     # Convert from hectares to billion square kilometers
-      group_by(GCAM_region_ID, GCAM_commodity, year) %>%                                                        # Group by region, commodity, year
+      filter(!is.na(GCAM_commodity)) %>%                                                                        # Remove commodities not included in GCAM
+      group_by(GCAM_region_ID, GCAM_commodity, GLU, year) %>%                                                        # Group by region, commodity, GLU, year
       summarize(value = sum(value)) %>%                                                                         # Aggregate then map to appropriate data frame
       mutate(value = value * CONV_TON_MEGATON) %>%                                                             # Convert from tons to Mt
-      ungroup() %>%                                                                                             # Ungroup before complete
+      ungroup() ->                                                                                           # Ungroup before complete
+      L101.ag_Prod_Mt_R_C_Y_GLU
+
+    # Also write out the production volumes without basin-level detail (by region, crop, year)
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
+      group_by(GCAM_region_ID, GCAM_commodity, year) %>%
+      summarise(value = sum(value)) %>%
+      ungroup() %>%
       complete(GCAM_region_ID = unique(iso_GCAM_regID$GCAM_region_ID),
                GCAM_commodity, year, fill = list(value = 0))  ->                                                # Fill in missing region/commodity combinations with 0
       L101.ag_Prod_Mt_R_C_Y
 
-    # Now, Process FAO harvested area data: convert units, aggregate to region and commodity
-    FAO_PRODSTAT_MERGED %>%
-      select(iso, item, year, harvested.area) %>%                                                             # Select relevant columns (not production)
+    # Now, Process FAO harvested area data: convert units, aggregate to region, commodity, and GLU
+    FAO_PRODSTAT_DOWNSCALED %>%
+      select(iso, item, GLU, year, harvested.area) %>%                                                             # Select relevant columns (not production)
       rename(value = harvested.area) %>%                                                                      # Rename column since tests are expecting "value"
       left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                               # Map in ISO codes
       left_join(unique(FAO_ag_items_PRODSTAT[ c("item", "GCAM_commodity")]), by = "item") %>%                # Map in GCAM commodities
-      filter(!is.na(GCAM_commodity)) %>%                                                                      # Remove commodities not included in GCAM      mutate(value = value * CONV_HA_BM2) %>%                                                                     # Convert from hectares to billion square kilometers
-      group_by(GCAM_region_ID, GCAM_commodity, year) %>%                                                      # Group by region, commodity, year
+      filter(!is.na(GCAM_commodity)) %>%                                                                      # Remove commodities not included in GCAM
+      group_by(GCAM_region_ID, GCAM_commodity, GLU, year) %>%                                                      # Group by region, commodity, GLU, year
       summarize(value = sum(value)) %>%                                                                       # Aggregate then map to appropriate data frame
-      mutate(value = value * CONV_HA_BM2) %>%                                                                # Convert from hectares to billion km2
-      ungroup() %>%                                                                                           # Ungroup before complete
+      mutate(value = value * CONV_HA_BM2) %>%                                                                # Convert from hectares to billion m2
+      ungroup() ->                                                                                           # Ungroup before complete
+      L101.ag_HA_bm2_R_C_Y_GLU
+
+    L101.ag_HA_bm2_R_C_Y_GLU %>%
+      group_by(GCAM_region_ID, GCAM_commodity, year) %>%
+      summarise(value = sum(value)) %>%
+      ungroup() %>%
       complete(GCAM_region_ID = unique(iso_GCAM_regID$GCAM_region_ID),
                GCAM_commodity, year, fill = list(value = 0)) ->                                               # Fill in missing region/commodity combinations with 0
       L101.ag_HA_bm2_R_C_Y
 
-    # Produce outputs
+    # Calculate initial yield estimates in kilograms per square meter by region, crop, year, and GLU
+    # Yield in kilograms per square meter
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
+      left_join(L101.ag_HA_bm2_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
+      mutate(value = value.x / value.y) %>%
+      replace_na(list(value = 0)) %>%
+      select(-value.x, -value.y) %>%
+      arrange(GLU) ->  # so we match old d.s. order
+      L101.ag_Yield_kgm2_R_C_Y_GLU
+
+        # Produce outputs
     L101.ag_Food_Mt_R_C_Y %>%
       add_title("FAO food consumption by GCAM region, commodity, and year") %>%
       add_units("Mt/yr") %>%
@@ -159,31 +224,69 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
       add_legacy_name("L101.ag_kcalg_R_C_Y") %>%
       add_precursors("L100.FAO_ag_Food_t", "aglu/FAO/FAO_ag_items_cal_SUA", "common/iso_GCAM_regID") ->
       L101.ag_kcalg_R_C_Y
+    L101.ag_HA_bm2_R_C_GLU %>%
+      add_title("Harvested area by GCAM region / commodity / GLU") %>%
+      add_units("Thousand km^2 = billion m^2 (bm2") %>%
+      add_comments("LDS harvested area data, sourced from Monfreda,") %>%
+      add_comments("is read in at the iso-GLU-GTAP_crop level, and converted to GCAM") %>%
+      add_comments("regions, commodities, and units.") %>%
+      add_legacy_name("L102.ag_HA_bm2_R_C_GLU") %>%
+      add_precursors("common/iso_GCAM_regID",
+                     "aglu/FAO/FAO_ag_items_PRODSTAT",
+                     "L100.LDS_ag_HA_ha") ->
+      L101.ag_HA_bm2_R_C_GLU
 
-    # The next two datasets have rounding issues that we couldn't resolve:
+    # The next four datasets have rounding issues that we couldn't resolve:
     # they kept failing the 'oldnew' test even though data confirmed to be
     # the same (to reasonable precision). Use the less-strict sum test for these.
+    L101.ag_HA_bm2_R_C_Y_GLU %>%
+      add_title("Harvested area by GCAM region, commodity, year, and GLU") %>%
+      add_units("billion km2") %>%
+      add_comments("FAO data downscaled to GLU then aggregated by GCAM region, commodity, and GLU") %>%
+      add_comments("Data was also converted from HA to billion km2") %>%
+      add_legacy_name("L103.ag_HA_bm2_R_C_Y_GLU") %>%
+      add_precursors("L100.FAO_ag_HA_ha", "aglu/FAO/FAO_ag_items_PRODSTAT", "L100.LDS_ag_HA_ha", "common/iso_GCAM_regID") ->
+      L101.ag_HA_bm2_R_C_Y_GLU
     L101.ag_HA_bm2_R_C_Y %>%
-      add_title("descriptive title of data") %>%
+      add_title("Harvested area by GCAM region, commodity, and year") %>%
       add_units("billion km2") %>%
-      add_comments("Aggregated FAO data by GCAM region and commodity") %>%
+      add_comments("FAO data downscaled to GLU then aggregated by GCAM region and commodity") %>%
       add_comments("Data was also converted from HA to billion km2") %>%
       add_comments("Country/crop combinations with zero production were assigned zero harvested area") %>%
       add_legacy_name("L101.ag_HA_bm2_R_C_Y") %>%
-      add_precursors("L100.FAO_ag_HA_ha", "aglu/FAO/FAO_ag_items_PRODSTAT", "L100.FAO_ag_Prod_t", "common/iso_GCAM_regID") ->
+      same_precursors_as(L101.ag_HA_bm2_R_C_Y_GLU) ->
       L101.ag_HA_bm2_R_C_Y
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
+      add_title("Agricultural production by GCAM region, commodity, year, and GLU") %>%
+      add_units("Mt/yr") %>%
+      add_comments("FAO data downscaled to GLU then aggregated by GCAM region, commodity, and GLU") %>%
+      add_comments("Data was also converted from tons to Mt") %>%
+      add_comments("USA alfalfa production was divided by 4 for consistency with USDA") %>%
+      add_comments("Country/crop combinations with zero harvested area were assigned zero production") %>%
+      add_legacy_name("L101.ag_Prod_Mt_R_C_Y_GLU") %>%
+      add_precursors("L100.FAO_ag_Prod_t", "aglu/FAO/FAO_ag_items_PRODSTAT", "L100.LDS_ag_prod_t", "common/iso_GCAM_regID") ->
+      L101.ag_Prod_Mt_R_C_Y_GLU
     L101.ag_Prod_Mt_R_C_Y %>%
-      add_title("Agricultural production by GCAM region, commodity (cotton separated), and year") %>%
+      add_title("Agricultural production by GCAM region, commodity, and year") %>%
       add_units("Mt/yr") %>%
-      add_comments("Aggregated FAO data by GCAM region and commodity") %>%
+      add_comments("FAO data downscaled to GLU then aggregated by GCAM region and commodity") %>%
       add_comments("Data was also converted from tons to Mt") %>%
       add_comments("USA alfalfa production was divided by 4 for consistency with USDA") %>%
       add_comments("Country/crop combinations with zero harvested area were assigned zero production") %>%
       add_legacy_name("L101.ag_Prod_Mt_R_C_Y") %>%
-      add_precursors("L100.FAO_ag_Prod_t", "aglu/FAO/FAO_ag_items_PRODSTAT", "L100.FAO_ag_HA_ha", "common/iso_GCAM_regID") ->
+      same_precursors_as(L101.ag_Prod_Mt_R_C_Y_GLU) ->
       L101.ag_Prod_Mt_R_C_Y
+    L101.ag_Yield_kgm2_R_C_Y_GLU %>%
+      add_title("Unadjusted agronomic yield by GCAM region / commodity / year / GLU") %>%
+      add_units("kg/m2") %>%
+      add_comments("Agricultural yield computed based on production and harvested area") %>%
+      add_legacy_name("L103.ag_Yield_kgm2_R_C_Y_GLU") %>%
+      same_precursors_as(L101.ag_Prod_Mt_R_C_Y_GLU) ->
+      L101.ag_Yield_kgm2_R_C_Y_GLU
 
-    return_data(L101.ag_Food_Mt_R_C_Y, L101.ag_Food_Pcal_R_C_Y, L101.ag_kcalg_R_C_Y, L101.ag_HA_bm2_R_C_Y, L101.ag_Prod_Mt_R_C_Y)
+    return_data(L101.ag_Food_Mt_R_C_Y, L101.ag_Food_Pcal_R_C_Y, L101.ag_kcalg_R_C_Y, L101.ag_HA_bm2_R_C_GLU,
+                L101.ag_HA_bm2_R_C_Y_GLU, L101.ag_HA_bm2_R_C_Y, L101.ag_Prod_Mt_R_C_Y_GLU, L101.ag_Prod_Mt_R_C_Y,
+                L101.ag_Yield_kgm2_R_C_Y_GLU)
   } else {
     stop("Unknown command")
   }
diff --git a/input/gcamdata/R/zchunk_LA102.ag_LDS_R_C_GLU.R b/input/gcamdata/R/zchunk_LA102.ag_LDS_R_C_GLU.R
deleted file mode 100644
index 61c8e79..0000000
--- a/input/gcamdata/R/zchunk_LA102.ag_LDS_R_C_GLU.R
+++ /dev/null
@@ -1,129 +0,0 @@
-#' module_aglu_LA102.ag_LDS_R_C_GLU
-#'
-#' Initializes harvested area and production values using LDS data for each GCAM Region-Commodity-GLU combination.
-#'
-#' @param command API command to execute
-#' @param ... other optional parameters, depending on command
-#' @return Depends on \code{command}: either a vector of required inputs,
-#' a vector of output names, or (if \code{command} is "MAKE") all
-#' the generated outputs: \code{L102.ag_HA_bm2_R_C_GLU}, \code{L102.ag_Prod_Mt_R_C_GLU}. The corresponding file in the
-#' original data system was \code{LA102.ag_LDS_R_C_GLU.R} (aglu level1).
-#' @details This module takes LDS initialization data (sourced from HYDE, SAGE and other places) at the
-#' iso country-GLU-GTAP_crop level for both Harvested Area and Agricultural Production, and aggregates to the
-#' GCAM region and commodity level. This module also converts to GCAM model units of billion meters squared (bm2)
-#' for Harvested Area and of Megatons (Mt) for Production.
-#' @importFrom assertthat assert_that
-#' @importFrom dplyr filter mutate select
-#' @importFrom tidyr gather spread
-#' @author ACS April 2017
-module_aglu_LA102.ag_LDS_R_C_GLU <- function(command, ...) {
-  if(command == driver.DECLARE_INPUTS) {
-    return(c(FILE = "common/iso_GCAM_regID",
-             FILE = "aglu/FAO/FAO_ag_items_PRODSTAT",
-             "L100.LDS_ag_HA_ha",
-             "L100.LDS_ag_prod_t"))
-  } else if(command == driver.DECLARE_OUTPUTS) {
-    return(c("L102.ag_HA_bm2_R_C_GLU",
-             "L102.ag_Prod_Mt_R_C_GLU"))
-  } else if(command == driver.MAKE) {
-
-    country_name <- region_GCAM3 <- . <- GCAM_region_ID <- GCAM_commodity <-
-        GLU <- value <- NULL            # silence package check.
-
-    all_data <- list(...)[[1]]
-
-    # Load required inputs
-    iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
-    FAO_ag_items_PRODSTAT <- get_data(all_data, "aglu/FAO/FAO_ag_items_PRODSTAT")
-    L100.LDS_ag_HA_ha <- get_data(all_data, "L100.LDS_ag_HA_ha")
-    L100.LDS_ag_prod_t <- get_data(all_data, "L100.LDS_ag_prod_t")
-
-
-    # Perform Computations:
-
-    # Lines 33-50 in original file
-    # Add GCAM_region_ID and GCAM_commodity identifiers, aggregate to the GCAM region, GLU, and commodity level,
-    # and convert units for each:
-    # harvested area table, L100.LDS_ag_HA_ha
-    # agricultural production table, L100.LDS_ag_prod_t
-    #
-    # Add GCAM region and commodity info to LDS tables
-    # Collapse production and harvested area data to GCAM regions and commodities
-    # Convert GTAP mass to Mt and area to thousand km2 (billion m2, or bm2)
-
-    # Take the harvested area table, L100.LDS_ag_HA_ha
-    L100.LDS_ag_HA_ha %>%
-      # append GCAM region information from the iso table:
-      left_join_error_no_match(iso_GCAM_regID, by = c("iso")) %>%
-      # remove the country_name and GCAM3 columns added from the iso table:
-      select(-country_name, -region_GCAM3) %>%
-      # append GCAM_commodity information from the FAO table using a left_join to preserve NA values as in old system:
-      left_join(., FAO_ag_items_PRODSTAT, by = c("GTAP_crop")) %>%
-      # select only the relevant columns; iso and GTAP_crop are dropped because they are ommitted from the aggregation:
-      ungroup() %>%
-      select(GCAM_region_ID, GCAM_commodity,GLU, value) %>%
-      # group by GCAM region, GCAM commodity, and GLU for the aggregation:
-      group_by(GCAM_region_ID, GCAM_commodity, GLU) %>%
-      # aggregate to the GCAM region, commodity, GLU level:
-      summarise(value = sum(value)) %>%
-      ungroup() %>%
-      # convert units from hectares (ha) to thou km^2 (=billion m^2, bm2):
-      mutate(value = value * CONV_HA_BM2) %>%
-      # omit na values, since they do not appear in the original table:
-      na.omit()->
-      # store in the final, labeled table for harvested area (HA) in units bm2 at the region-commodity-glu level:
-      L102.ag_HA_bm2_R_C_GLU
-
-    # Take the production table, L100.LDS_ag_HA_ha
-    L100.LDS_ag_prod_t %>%
-      # append GCAM region information from the iso table:
-      left_join_error_no_match(iso_GCAM_regID, by = c("iso")) %>%
-      # remove the country_name and GCAM3 columns added from the iso table:
-      select(-country_name, -region_GCAM3) %>%
-      # append GCAM_commodity information from the FAO table using a left_join to preserve NA values as in old system:
-      left_join(., FAO_ag_items_PRODSTAT, by = c("GTAP_crop")) %>%
-      # select only the relevant columns; iso and GTAP_crop are dropped because they are ommitted from the aggregation:
-      ungroup() %>%
-      select(GCAM_region_ID, GCAM_commodity,GLU, value) %>%
-      # group by GCAM region, GCAM commodity, and GLU for the aggregation:
-      group_by(GCAM_region_ID, GCAM_commodity, GLU) %>%
-      # aggregate to the GCAM region, commodity, GLU level:
-      summarise(value = sum(value)) %>%
-      ungroup() %>%
-      # convert units from ton (t) to Megatons (Mt):
-      mutate(value = value * CONV_TON_MEGATON) %>%
-      # omit na values, since they do not appear in the original table:
-      na.omit() ->
-      # store in the final, labeled table for production in units Mt at the region-commodity-glu level:
-      L102.ag_Prod_Mt_R_C_GLU
-
-
-    # Produce outputs
-    L102.ag_HA_bm2_R_C_GLU %>%
-      add_title("Harvested area by GCAM region / commodity / GLU") %>%
-      add_units("Thousand km^2 = billion m^2 (bm2") %>%
-      add_comments("LDS harvested area data, sourced from SAGE, Hyde, and others, ") %>%
-      add_comments("is read in at the iso-GLU-GTAP_crop level, and converted to GCAM") %>%
-      add_comments("regions, commodities, and units.") %>%
-      add_legacy_name("L102.ag_HA_bm2_R_C_GLU") %>%
-      add_precursors("common/iso_GCAM_regID",
-                     "aglu/FAO/FAO_ag_items_PRODSTAT",
-                     "L100.LDS_ag_HA_ha") ->
-      L102.ag_HA_bm2_R_C_GLU
-    L102.ag_Prod_Mt_R_C_GLU %>%
-      add_title("Crop production by GCAM region / commodity / GLU") %>%
-      add_units("Megatons (Mt)") %>%
-      add_comments("LDS production data, sourced from SAGE, Hyde, and others, ") %>%
-      add_comments("is read in at the iso-GLU-GTAP_crop level, and converted to GCAM") %>%
-      add_comments("regions, commodities, and units.") %>%
-      add_legacy_name("L102.ag_Prod_Mt_R_C_GLU") %>%
-      add_precursors("common/iso_GCAM_regID",
-                     "aglu/FAO/FAO_ag_items_PRODSTAT",
-                     "L100.LDS_ag_prod_t") ->
-      L102.ag_Prod_Mt_R_C_GLU
-
-    return_data(L102.ag_HA_bm2_R_C_GLU, L102.ag_Prod_Mt_R_C_GLU)
-  } else {
-    stop("Unknown command")
-  }
-}
diff --git a/input/gcamdata/R/zchunk_LA103.ag_R_C_Y_GLU.R b/input/gcamdata/R/zchunk_LA103.ag_R_C_Y_GLU.R
deleted file mode 100644
index 540b81f..0000000
--- a/input/gcamdata/R/zchunk_LA103.ag_R_C_Y_GLU.R
+++ /dev/null
@@ -1,175 +0,0 @@
-#' module_aglu_LA103.ag_R_C_Y_GLU
-#'
-#' Calculate production, harvested area, and yield by region, crop, GLU, and year.
-#'
-#' @param command API command to execute
-#' @param ... other optional parameters, depending on command
-#' @return Depends on \code{command}: either a vector of required inputs,
-#' a vector of output names, or (if \code{command} is "MAKE") all
-#' the generated outputs: \code{L103.ag_Prod_Mt_R_C_Y_GLU}, \code{L103.ag_Prod_Mt_R_C_Y}, \code{L103.ag_HA_bm2_R_C_Y_GLU}, \code{L103.ag_Yield_kgm2_R_C_Y_GLU}. The corresponding file in the
-#' original data system was \code{LA103.ag_R_C_Y_GLU.R} (aglu level1).
-#' @details We only have production and harvested area by region and GLU for a single
-#' representative base year (circa 2000), and are using that to downscale regional
-#' production and harvested area in all years. So, if GLU223 accounted for 20% of U.S.
-#' corn production in ~2000, then it accounted for 20% of US corn production in all years.
-#' @importFrom assertthat assert_that
-#' @importFrom dplyr filter mutate select
-#' @importFrom tidyr gather spread
-#' @author BBL April 2017
-module_aglu_LA103.ag_R_C_Y_GLU <- function(command, ...) {
-  if(command == driver.DECLARE_INPUTS) {
-    return(c(FILE = "common/iso_GCAM_regID",
-             "L101.ag_Prod_Mt_R_C_Y",
-             "L101.ag_HA_bm2_R_C_Y",
-             "L102.ag_Prod_Mt_R_C_GLU",
-             "L102.ag_HA_bm2_R_C_GLU"))
-  } else if(command == driver.DECLARE_OUTPUTS) {
-    return(c("L103.ag_Prod_Mt_R_C_Y_GLU",
-             "L103.ag_Prod_Mt_R_C_Y",
-             "L103.ag_HA_bm2_R_C_Y_GLU",
-             "L103.ag_Yield_kgm2_R_C_Y_GLU"))
-  } else if(command == driver.MAKE) {
-
-        year <- GCAM_region_ID <- GCAM_commodity <- value <- value.y <- value.x <-
-            GLU <- valuesum <- NULL     # silence package check.
-
-
-    all_data <- list(...)[[1]]
-
-    # Load required inputs
-    iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
-    get_data(all_data, "L101.ag_Prod_Mt_R_C_Y") %>%
-      mutate(year = as.integer(year)) ->
-      L101.ag_Prod_Mt_R_C_Y
-     get_data(all_data, "L101.ag_HA_bm2_R_C_Y") %>%
-      mutate(year = as.integer(year)) ->
-      L101.ag_HA_bm2_R_C_Y
-    L102.ag_Prod_Mt_R_C_GLU <- get_data(all_data, "L102.ag_Prod_Mt_R_C_GLU")
-    L102.ag_HA_bm2_R_C_GLU <- get_data(all_data, "L102.ag_HA_bm2_R_C_GLU")
-
-    # Combine FAO and GTAP: create tables with crop production and harvested area by
-    # geographic land unit (GLU) and historical year production (Mt)
-    L102.ag_Prod_Mt_R_C_GLU %>%
-      group_by(GCAM_region_ID, GCAM_commodity) %>%
-      summarise(value = sum(value)) %>%
-      right_join(L102.ag_Prod_Mt_R_C_GLU, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
-      mutate(value = value.y / value.x) %>%
-      replace_na(list(value = 0)) %>%
-      select(-value.x, -value.y) ->
-      L103.ag_Prod_frac_R_C_GLU
-
-    # Disaggregate FAO harvested area of all crops to GLUs using GTAP/LDS data
-    L102.ag_HA_bm2_R_C_GLU %>%
-      group_by(GCAM_region_ID, GCAM_commodity) %>%
-      summarise(value = sum(value)) %>%
-      right_join(L102.ag_HA_bm2_R_C_GLU, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
-      mutate(value = value.y / value.x) %>%
-      replace_na(list(value = 0)) %>%
-      select(-value.x, -value.y) ->
-      L103.ag_HA_frac_R_C_GLU
-
-    # Multiply historical production by these shares in order to downscale to GLU
-    # NOTE: There are a few region x crop combinations in the FAO data that aren't in the aggregated gridded dataset,
-    # presumably because production was zero in around 2000, the base year for the gridded dataset. In analysis of
-    # these missing values, the quantities are tiny (zero in most years, <0.01 Mt in all/most others) and dropping
-    # them should not have any consequences
-    L103.ag_Prod_frac_R_C_GLU %>%
-      left_join(L101.ag_Prod_Mt_R_C_Y, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
-      mutate(value = value.x * value.y) %>%
-      filter(year %in% HISTORICAL_YEARS) %>%
-      select(-value.x, -value.y) %>%
-      arrange(GLU) ->  # so we match old d.s. order
-      L103.ag_Prod_Mt_R_C_Y_GLU
-
-    # Remove crops from the written-out data that are zero in all years
-    # This is part of the "pruning" process of not creating XML tags for land use types that are non-applicable
-    remove_all_zeros <- function(x) {
-      x %>%
-        group_by(GCAM_region_ID, GCAM_commodity) %>%
-        summarise(valuesum = sum(value)) %>%
-        right_join(x, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
-        filter(valuesum > 0) %>%
-        select(-valuesum)
-    }
-    L103.ag_Prod_Mt_R_C_Y_GLU <- remove_all_zeros(L103.ag_Prod_Mt_R_C_Y_GLU)
-
-    # Same operation again
-    L103.ag_HA_frac_R_C_GLU %>%
-      left_join(L101.ag_HA_bm2_R_C_Y, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
-      mutate(value = value.x * value.y) %>%
-      filter(year %in% HISTORICAL_YEARS) %>%
-      select(-value.x, -value.y) %>%
-      arrange(GLU) ->  # so we match old d.s. order
-      L103.ag_HA_bm2_R_C_Y_GLU
-    L103.ag_HA_bm2_R_C_Y_GLU <- remove_all_zeros(L103.ag_HA_bm2_R_C_Y_GLU)
-
-    # Calculate initial yield estimates in kilograms per square meter by region, crop, year, and GLU
-    # Yield in kilograms per square meter
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
-      left_join(L103.ag_HA_bm2_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
-      mutate(value = value.x / value.y) %>%
-      replace_na(list(value = 0)) %>%
-      select(-value.x, -value.y) %>%
-      arrange(GLU) ->  # so we match old d.s. order
-      L103.ag_Yield_kgm2_R_C_Y_GLU
-
-    # Aggregate through GLUs to get production by region/crop/year; different from L101 production in that we have now dropped
-    # some observations that weren't available in the GTAP-based gridded inventories
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
-      group_by(GCAM_region_ID, GCAM_commodity, year) %>%
-      summarise(value = sum(value)) %>%
-      ungroup %>%
-      complete(GCAM_region_ID = unique(iso_GCAM_regID$GCAM_region_ID), GCAM_commodity, year, fill = list(value = 0)) %>%
-      arrange(GCAM_commodity, GCAM_region_ID) ->  # so we match old d.s. order
-      L103.ag_Prod_Mt_R_C_Y
-
-
-    # Produce outputs
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
-      ungroup %>%
-      add_title("Crop production by GCAM region / commodity / year / GLU") %>%
-      add_units("Mt") %>%
-      add_comments("Crop production computed based on representative base year, using") %>%
-      add_comments("GLU-specific production and harvested area in all years") %>%
-      add_legacy_name("L103.ag_Prod_Mt_R_C_Y_GLU") %>%
-      add_precursors("L101.ag_Prod_Mt_R_C_Y",
-                     "L102.ag_Prod_Mt_R_C_GLU") ->
-      L103.ag_Prod_Mt_R_C_Y_GLU
-
-    L103.ag_Prod_Mt_R_C_Y %>%
-      add_title("Crop production by GCAM region / commodity / year") %>%
-      add_units("Mt") %>%
-      add_comments("Crop production computed based on representative base year") %>%
-      add_legacy_name("L103.ag_Prod_Mt_R_C_Y") %>%
-      same_precursors_as(L103.ag_Prod_Mt_R_C_Y_GLU) %>%
-      add_precursors("common/iso_GCAM_regID") ->
-      L103.ag_Prod_Mt_R_C_Y
-
-    L103.ag_HA_bm2_R_C_Y_GLU %>%
-      ungroup %>%
-      add_title("Harvested area by GCAM region / commodity / year / GLU") %>%
-      add_units("bm2") %>%
-      add_comments("Agricultural harvested area computed based on representative base year, and") %>%
-      add_comments("downscaled to regional production and harvested area in all years by GLU") %>%
-      add_legacy_name("L103.ag_HA_bm2_R_C_Y_GLU") %>%
-      add_precursors("L101.ag_HA_bm2_R_C_Y",
-                     "L102.ag_HA_bm2_R_C_GLU") ->
-      L103.ag_HA_bm2_R_C_Y_GLU
-
-    L103.ag_Yield_kgm2_R_C_Y_GLU %>%
-      ungroup() %>%
-      add_title("Unadjusted agronomic yield by GCAM region / commodity / year / GLU") %>%
-      add_units("kg/m2") %>%
-      add_comments("Agricultural yield computed based on production and harvest area, and") %>%
-      add_comments("downscaled to regional values for all years") %>%
-      add_legacy_name("L103.ag_Yield_kgm2_R_C_Y_GLU") %>%
-      same_precursors_as(L103.ag_HA_bm2_R_C_Y_GLU) %>%
-      add_precursors("L101.ag_Prod_Mt_R_C_Y",
-                     "L102.ag_Prod_Mt_R_C_GLU") ->
-      L103.ag_Yield_kgm2_R_C_Y_GLU
-
-    return_data(L103.ag_Prod_Mt_R_C_Y_GLU, L103.ag_Prod_Mt_R_C_Y, L103.ag_HA_bm2_R_C_Y_GLU, L103.ag_Yield_kgm2_R_C_Y_GLU)
-  } else {
-    stop("Unknown command")
-  }
-}
diff --git a/input/gcamdata/R/zchunk_LA108.ag_Feed_R_C_Y.R b/input/gcamdata/R/zchunk_LA108.ag_Feed_R_C_Y.R
index 4d5ea10..5813e3f 100644
--- a/input/gcamdata/R/zchunk_LA108.ag_Feed_R_C_Y.R
+++ b/input/gcamdata/R/zchunk_LA108.ag_Feed_R_C_Y.R
@@ -22,7 +22,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
     return(c(FILE = "common/iso_GCAM_regID",
              FILE = "aglu/FAO/FAO_ag_items_cal_SUA",
              "L100.FAO_ag_Feed_t",
-             "L103.ag_Prod_Mt_R_C_Y",
+             "L101.ag_Prod_Mt_R_C_Y",
              "L107.an_Feed_Mt_R_C_Sys_Fd_Y"))
   } else if(command == driver.DECLARE_OUTPUTS) {
     return(c("L108.ag_Feed_Mt_R_C_Y",
@@ -40,7 +40,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
     iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
     FAO_ag_items_cal_SUA <- get_data(all_data, "aglu/FAO/FAO_ag_items_cal_SUA")
     L100.FAO_ag_Feed_t <- get_data(all_data, "L100.FAO_ag_Feed_t")
-    L103.ag_Prod_Mt_R_C_Y <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y")
+    L101.ag_Prod_Mt_R_C_Y <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y")
     L107.an_Feed_Mt_R_C_Sys_Fd_Y <- get_data(all_data, "L107.an_Feed_Mt_R_C_Sys_Fd_Y")
 
     # Part 1: FEEDCROPS
@@ -86,7 +86,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
     # Part 2: Calculating FodderHerb and Residue balances by region and year
     # First, compute differences between FodderHerb production and FodderHerb_Residue demand.
     # This will be used to compute Residue supply, and to adjust OtherUses of FodderHerb_Residue.
-    L103.ag_Prod_Mt_R_C_Y %>%
+    L101.ag_Prod_Mt_R_C_Y %>%
       filter(GCAM_commodity == "FodderHerb") %>%                                                                  # Filter production data for "FodderHerb"
       rename(FodderHerb = value) %>%
       left_join(filter(an_Feed_Mt_R_C_Y,feed == "FodderHerb_Residue"), by = c("GCAM_region_ID", "year")) %>%       # Map in demands for FodderHerb_Residue
@@ -144,7 +144,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
     an_Feed_Mt_R_C_Y %>%
       filter(feed == "Pasture_FodderGrass") %>%                                                                 # Start with Pasture_FodderGrass demand
       rename(PastFodderGrass_Demand = value) %>%
-      left_join(filter(L103.ag_Prod_Mt_R_C_Y, GCAM_commodity == "FodderGrass"),
+      left_join(filter(L101.ag_Prod_Mt_R_C_Y, GCAM_commodity == "FodderGrass"),
                 by = c("GCAM_region_ID", "year")) %>%                                                          # Map in FodderGrass production
       mutate(value = PastFodderGrass_Demand - value, GCAM_commodity = "Pasture") %>%                            # Compute Pasture supply as difference
       select(-feed, -PastFodderGrass_Demand) ->
@@ -164,7 +164,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
 
     # Adjust FodderGrass feed to reflect the shift in production from feed to other uses (calculated above)
     # FodderGrass used as feed = FodderGrass production - other uses
-    L103.ag_Prod_Mt_R_C_Y %>%
+    L101.ag_Prod_Mt_R_C_Y %>%
       filter(GCAM_commodity == "FodderGrass") %>%                                                          # Start with production of FodderGrass
       rename(Production = value) %>%
       left_join(ag_OtherUses_Mt_R_FodderGrass_Y, by = c("GCAM_commodity", "GCAM_region_ID", "year")) %>%   # Map in other uses
@@ -190,7 +190,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
       ag_Feed_Mt_R_C_Y
 
     # Part 6: Compute net exports of FodderHerb
-    L103.ag_Prod_Mt_R_C_Y %>%
+    L101.ag_Prod_Mt_R_C_Y %>%
       filter(GCAM_commodity == "FodderHerb") %>%                                                          # Start with production of FodderHerb
       rename(Production = value) %>%
       left_join(ag_Feed_Mt_R_FodderHerb_Y, by = c("GCAM_commodity", "GCAM_region_ID", "year")) %>%        # Map in feed demand
@@ -214,7 +214,7 @@ module_aglu_LA108.ag_Feed_R_C_Y <- function(command, ...) {
       add_comments("Note: excess FodderGrass and FodderHerb production are mapped to OtherUses") %>%
       add_legacy_name("L108.ag_Feed_Mt_R_C_Y") %>%
       add_precursors("common/iso_GCAM_regID", "aglu/FAO/FAO_ag_items_cal_SUA", "L100.FAO_ag_Feed_t",
-                     "L103.ag_Prod_Mt_R_C_Y", "L107.an_Feed_Mt_R_C_Sys_Fd_Y") ->
+                     "L101.ag_Prod_Mt_R_C_Y", "L107.an_Feed_Mt_R_C_Sys_Fd_Y") ->
       L108.ag_Feed_Mt_R_C_Y
 
     ag_NetExp_Mt_R_FodderHerb_Y %>%
diff --git a/input/gcamdata/R/zchunk_LB109.ag_an_ALL_R_C_Y.R b/input/gcamdata/R/zchunk_LB109.ag_an_ALL_R_C_Y.R
index 6ffc37d..20ef920 100644
--- a/input/gcamdata/R/zchunk_LB109.ag_an_ALL_R_C_Y.R
+++ b/input/gcamdata/R/zchunk_LB109.ag_an_ALL_R_C_Y.R
@@ -17,7 +17,7 @@
 module_aglu_LB109.ag_an_ALL_R_C_Y <- function(command, ...) {
   if(command == driver.DECLARE_INPUTS) {
     return(c("L101.ag_Food_Mt_R_C_Y",
-              "L103.ag_Prod_Mt_R_C_Y",
+              "L101.ag_Prod_Mt_R_C_Y",
               "L105.an_Food_Mt_R_C_Y",
               "L105.an_Prod_Mt_R_C_Y",
               "L106.ag_NetExp_Mt_R_C_Y",
@@ -40,7 +40,7 @@ module_aglu_LB109.ag_an_ALL_R_C_Y <- function(command, ...) {
 
     # Load required inputs
     L101.ag_Food_Mt_R_C_Y <- get_data(all_data, "L101.ag_Food_Mt_R_C_Y")
-    L103.ag_Prod_Mt_R_C_Y <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y")
+    L101.ag_Prod_Mt_R_C_Y <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y")
     L105.an_Food_Mt_R_C_Y <- get_data(all_data, "L105.an_Food_Mt_R_C_Y")
     L105.an_Prod_Mt_R_C_Y <- get_data(all_data, "L105.an_Prod_Mt_R_C_Y")
     L106.ag_NetExp_Mt_R_C_Y <- get_data(all_data, "L106.ag_NetExp_Mt_R_C_Y")
@@ -53,7 +53,7 @@ module_aglu_LB109.ag_an_ALL_R_C_Y <- function(command, ...) {
     # List of all flows for primary agricultural good balances
     ag_Flow_cols <- c("Prod_Mt", "NetExp_Mt", "Supply_Mt", "Food_Mt", "Feed_Mt", "Biofuels_Mt", "OtherUses_Mt")
     # List of commodities in production table
-    L103.ag_Prod_Mt_R_C_Y %>%
+    L101.ag_Prod_Mt_R_C_Y %>%
       pull(GCAM_commodity) %>%
       unique() -> Primary_commodities
     # List of any commodities (e.g. pasture, residue, scavenging) in feed but not in production table
@@ -67,7 +67,7 @@ module_aglu_LB109.ag_an_ALL_R_C_Y <- function(command, ...) {
       bind_rows(L108.ag_NetExp_Mt_R_FodderHerb_Y) %>%
       # Name the flows in each table, and combine all tables
       mutate(flow = "NetExp_Mt") %>%
-      bind_rows(mutate(L103.ag_Prod_Mt_R_C_Y, flow = "Prod_Mt")) %>%
+      bind_rows(mutate(L101.ag_Prod_Mt_R_C_Y, flow = "Prod_Mt")) %>%
       bind_rows(mutate(L101.ag_Food_Mt_R_C_Y, flow = "Food_Mt")) %>%
       bind_rows(mutate(L108.ag_Feed_Mt_R_C_Y, flow = "Feed_Mt")) %>%
       bind_rows(mutate(L122.in_Mt_R_C_Yh, flow = "Biofuels_Mt")) %>%
@@ -200,7 +200,7 @@ module_aglu_LB109.ag_an_ALL_R_C_Y <- function(command, ...) {
       add_comments("Adjusts global and regional net exports to remove net negative other uses") %>%
       add_legacy_name("L109.ag_ALL_Mt_R_C_Y") %>%
       add_precursors("L101.ag_Food_Mt_R_C_Y",
-                     "L103.ag_Prod_Mt_R_C_Y",
+                     "L101.ag_Prod_Mt_R_C_Y",
                      "L106.ag_NetExp_Mt_R_C_Y",
                      "L108.ag_Feed_Mt_R_C_Y",
                      "L108.ag_NetExp_Mt_R_FodderHerb_Y",
diff --git a/input/gcamdata/R/zchunk_LB112.ag_prodchange_R_C_Y_GLU.R b/input/gcamdata/R/zchunk_LB112.ag_prodchange_R_C_Y_GLU.R
index e59a451..6af12be 100644
--- a/input/gcamdata/R/zchunk_LB112.ag_prodchange_R_C_Y_GLU.R
+++ b/input/gcamdata/R/zchunk_LB112.ag_prodchange_R_C_Y_GLU.R
@@ -24,7 +24,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
              FILE = "aglu/FAO/FAO_ag_items_PRODSTAT",
              FILE = "aglu/FAO/FAO_ag_CROSIT",
              "L100.LDS_ag_HA_ha",
-             "L103.ag_Prod_Mt_R_C_Y_GLU"))
+             "L101.ag_Prod_Mt_R_C_Y_GLU"))
   } else if(command == driver.DECLARE_OUTPUTS) {
     return(c("L112.ag_YieldRatio_R_C_Ysy_GLU",
              "L112.ag_YieldRate_R_C_Y_GLU",
@@ -48,7 +48,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
     FAO_ag_items_PRODSTAT <- get_data(all_data, "aglu/FAO/FAO_ag_items_PRODSTAT")
     FAO_ag_CROSIT <- get_data(all_data, "aglu/FAO/FAO_ag_CROSIT")
     L100.LDS_ag_HA_ha <- get_data(all_data, "L100.LDS_ag_HA_ha")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
 
     # Initial preparation of CROSIT database
     # Mapping file for CROSIT country name and country ID
@@ -271,7 +271,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
 
     # First, incomplete cases of ag commodities, use default yield change rates across 2010-2100
     # Get all GCAM region x commodity x GLU combinations in the production table
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       select(GCAM_region_ID, GCAM_commodity, GLU) %>%
       unique() %>%
       # Join the yield change rates of all specified ag productivity years 2010-2050 (this creates NAs, use left_join instead of left_join_error_no_match)
@@ -289,7 +289,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
       ag_YieldRate_incomplete.cases
 
     # Second, complete cases of ag commodities, yield change rates based on FAO estimates for 2010-2050
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       select(GCAM_region_ID, GCAM_commodity, GLU) %>%
       unique() %>%
       # Join the yield change rates for all specified ag productivity years from 2010 to 2050 (this creates NAs, use left_join instead of left_join_error_no_match)
@@ -316,7 +316,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
     # Do the same for biomass yield change rates
     # First, incomplete cases of biomass, use default yield change rates across 2010-2100
     # Get all combinations of region-GLU in ag production table
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       select(GCAM_region_ID, GLU) %>%
       unique() %>%
       mutate(GCAM_commodity = "biomass") %>%
@@ -335,7 +335,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
       bio_YieldRate_incomplete.cases
 
     # Second, complete cases of biomass, yield change rates based on FAO estimates for 2010-2050
-    L103.ag_Prod_Mt_R_C_Y_GLU %>%
+    L101.ag_Prod_Mt_R_C_Y_GLU %>%
       select(GCAM_region_ID, GLU) %>%
       unique() %>%
       mutate(GCAM_commodity = "biomass") %>%
@@ -381,7 +381,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
       add_comments("Change rates beyond 2050 to 2100 (or when FAO estimates are missing) are based on default agriculture productivity change assumptions.") %>%
       add_legacy_name("L112.ag_YieldRate_R_C_Y_GLU") %>%
       add_precursors("aglu/A_defaultYieldRate",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU") ->
+                     "L101.ag_Prod_Mt_R_C_Y_GLU") ->
       L112.ag_YieldRate_R_C_Y_GLU
 
     L112.bio_YieldRate_R_Y_GLU %>%
@@ -391,7 +391,7 @@ module_aglu_LB112.ag_prodchange_R_C_Y_GLU <- function(command, ...) {
       add_comments("Change rates beyond 2050 to 2100 (or when FAO estimates are missing) are based on default agriculture productivity change assumptions.") %>%
       add_legacy_name("L112.bio_YieldRate_R_Y_GLU") %>%
       add_precursors("aglu/A_defaultYieldRate",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU") ->
+                     "L101.ag_Prod_Mt_R_C_Y_GLU") ->
       L112.bio_YieldRate_R_Y_GLU
 
     return_data(L112.ag_YieldRatio_R_C_Ysy_GLU, L112.ag_YieldRate_R_C_Y_GLU, L112.bio_YieldRate_R_Y_GLU)
diff --git a/input/gcamdata/R/zchunk_LB122.LC_R_Cropland_Yh_GLU.R b/input/gcamdata/R/zchunk_LB122.LC_R_Cropland_Yh_GLU.R
index ecf7fdb..74fe48e 100644
--- a/input/gcamdata/R/zchunk_LB122.LC_R_Cropland_Yh_GLU.R
+++ b/input/gcamdata/R/zchunk_LB122.LC_R_Cropland_Yh_GLU.R
@@ -32,8 +32,8 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
              "L100.FAO_fallowland_kha",
              "L100.FAO_CL_kha",
              "L100.FAO_harv_CL_kha",
-             "L103.ag_HA_bm2_R_C_Y_GLU",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_HA_bm2_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L120.LC_bm2_R_LT_Yh_GLU"))
   } else if(command == driver.DECLARE_OUTPUTS) {
     return(c("L122.ag_HA_to_CropLand_R_Y_GLU",
@@ -56,8 +56,8 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
     L100.FAO_fallowland_kha <- get_data(all_data, "L100.FAO_fallowland_kha")
     L100.FAO_CL_kha <- get_data(all_data, "L100.FAO_CL_kha")
     L100.FAO_harv_CL_kha <- get_data(all_data, "L100.FAO_harv_CL_kha")
-    L103.ag_HA_bm2_R_C_Y_GLU <- get_data(all_data, "L103.ag_HA_bm2_R_C_Y_GLU")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_HA_bm2_R_C_Y_GLU <- get_data(all_data, "L101.ag_HA_bm2_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L120.LC_bm2_R_LT_Yh_GLU <- get_data(all_data, "L120.LC_bm2_R_LT_Yh_GLU")
 
 
@@ -73,9 +73,9 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
     # L122.LC_bm2_R_CropLand_Y_GLU (from Hyde), and vice versa.
     # Fill out the cropland table to include all R_GLUs in Monfreda:
     L122.LC_bm2_R_CropLand_Y_GLU %>%
-      # find the region-GLU combos in the Monfreda harvested area table L103.ag_HA_bm2_R_C_Y_GLU NOT contained
+      # find the region-GLU combos in the Monfreda harvested area table L101.ag_HA_bm2_R_C_Y_GLU NOT contained
       # in the L122.LC_bm2_R_CropLand_Y_GLU land cover table:
-      anti_join(L103.ag_HA_bm2_R_C_Y_GLU[,c("GCAM_region_ID", "GLU", "year")], .,
+      anti_join(L101.ag_HA_bm2_R_C_Y_GLU[,c("GCAM_region_ID", "GLU", "year")], .,
                 by = c("GCAM_region_ID", "GLU", "year")) %>%
       # save only the unique combinations:
       unique() %>%
@@ -92,9 +92,9 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
 
     # Line 48 in original file
     # old comment: compile harvested area across all crops
-    # Take the input historical harvested area table, L103.ag_HA_bm2_R_C_Y_GLU, and sum over GCAM_commodity, so that each
+    # Take the input historical harvested area table, L101.ag_HA_bm2_R_C_Y_GLU, and sum over GCAM_commodity, so that each
     # region-GLU-year combo has a single value.
-    L103.ag_HA_bm2_R_C_Y_GLU %>%
+    L101.ag_HA_bm2_R_C_Y_GLU %>%
       # remove GCAM_commodity:
       select(-GCAM_commodity) %>%
       group_by(GCAM_region_ID, GLU, year) %>%
@@ -283,10 +283,10 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
     # The ag_HA_to_CropLand ratio is assumed to be a property of the region and GLU (not specific to individual crops)
     # Calculate cropland requirements of each crop as harvested area divided by regional ag_HA_to_CropLand ratio
     # Take input harvested area by region-commodity-glu-year:
-    L103.ag_HA_bm2_R_C_Y_GLU %>%
+    L101.ag_HA_bm2_R_C_Y_GLU %>%
       # join the harvested area to cropland ratios, L122.ag_HA_to_CropLand_R_Y_GLU:
       left_join_error_no_match(L122.ag_HA_to_CropLand_R_Y_GLU, by = c("GCAM_region_ID", "GLU", "year")) %>%
-      # value.x = original harvested area info for each GCAM_commodity from L103.ag_HA_bm2_R_C_GLU
+      # value.x = original harvested area info for each GCAM_commodity from L101.ag_HA_bm2_R_C_Y_GLU
       # value.y = HA:CL ratio from L122.ag_HA_to_CropLand_R_Y_GLU just joined
       # calculate the harvested cropland for each commodity as value = value.x/value.y:
       mutate(value = value.x/value.y) %>%
@@ -313,14 +313,14 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
 
     # Lines 130-136 in original file
     # Calculate economic yield by each crop as production divided by cropland. Write out this preliminary table.
-    # Production by region-glu-commodity-year comes from input data L103.ag_Prod_Mt_R_C_Y_GLU.
+    # Production by region-glu-commodity-year comes from input data L101.ag_Prod_Mt_R_C_Y_GLU.
     # Cropland area by region-glu-commodity-year was calculated as table L122.LC_bm2_R_HarvCropLand_C_Y_GLU
     # Take cropland by region-glu-commodity-year:
     L122.LC_bm2_R_HarvCropLand_C_Y_GLU %>%
       # join the production by region-glu-commodity-year information:
-      left_join_error_no_match(L103.ag_Prod_Mt_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
+      left_join_error_no_match(L101.ag_Prod_Mt_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
       # value.x = the cropland area by region-commodity-glu-year from L122.LC_bm2_R_HarvCropLand_C_Y_GLU
-      # value.y = production by region-commodity-glu-year from L103.ag_Prod_Mt_R_C_Y_GLU
+      # value.y = production by region-commodity-glu-year from L101.ag_Prod_Mt_R_C_Y_GLU
       # Calculate yield by region-commodity-glu-year as value = value.y/value.x:
       mutate(value = value.y / value.x) %>%
       select(-value.x, -value.y, -Land_Type) %>%
@@ -530,7 +530,7 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
                      "L100.FAO_fallowland_kha",
                      "L100.FAO_CL_kha",
                      "L100.FAO_harv_CL_kha",
-                     "L103.ag_HA_bm2_R_C_Y_GLU",
+                     "L101.ag_HA_bm2_R_C_Y_GLU",
                      "L120.LC_bm2_R_LT_Yh_GLU") ->
       L122.ag_HA_to_CropLand_R_Y_GLU
 
@@ -544,8 +544,8 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
                      "L100.FAO_fallowland_kha",
                      "L100.FAO_CL_kha",
                      "L100.FAO_harv_CL_kha",
-                     "L103.ag_HA_bm2_R_C_Y_GLU",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU",
+                     "L101.ag_HA_bm2_R_C_Y_GLU",
+                     "L101.ag_Prod_Mt_R_C_Y_GLU",
                      "L120.LC_bm2_R_LT_Yh_GLU") ->
       L122.ag_EcYield_kgm2_R_C_Y_GLU
 
@@ -559,7 +559,7 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
                      "L100.FAO_fallowland_kha",
                      "L100.FAO_CL_kha",
                      "L100.FAO_harv_CL_kha",
-                     "L103.ag_HA_bm2_R_C_Y_GLU",
+                     "L101.ag_HA_bm2_R_C_Y_GLU",
                      "L120.LC_bm2_R_LT_Yh_GLU") ->
       L122.LC_bm2_R_OtherArableLand_Yh_GLU
 
@@ -573,7 +573,7 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
                      "L100.FAO_fallowland_kha",
                      "L100.FAO_CL_kha",
                      "L100.FAO_harv_CL_kha",
-                     "L103.ag_HA_bm2_R_C_Y_GLU",
+                     "L101.ag_HA_bm2_R_C_Y_GLU",
                      "L120.LC_bm2_R_LT_Yh_GLU") %>%
       add_flags(FLAG_PROTECT_FLOAT) ->
       L122.LC_bm2_R_ExtraCropLand_Yh_GLU
@@ -589,7 +589,7 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
                      "L100.FAO_fallowland_kha",
                      "L100.FAO_CL_kha",
                      "L100.FAO_harv_CL_kha",
-                     "L103.ag_HA_bm2_R_C_Y_GLU",
+                     "L101.ag_HA_bm2_R_C_Y_GLU",
                      "L120.LC_bm2_R_LT_Yh_GLU") %>%
       add_flags(FLAG_PROTECT_FLOAT) ->
       L122.LC_bm2_R_HarvCropLand_C_Yh_GLU
@@ -605,7 +605,7 @@ module_aglu_LB122.LC_R_Cropland_Yh_GLU <- function(command, ...) {
                      "L100.FAO_fallowland_kha",
                      "L100.FAO_CL_kha",
                      "L100.FAO_harv_CL_kha",
-                     "L103.ag_HA_bm2_R_C_Y_GLU",
+                     "L101.ag_HA_bm2_R_C_Y_GLU",
                      "L120.LC_bm2_R_LT_Yh_GLU") ->
       L122.LC_bm2_R_HarvCropLand_Yh_GLU
 
diff --git a/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R b/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R
index 76a82e9..afd1cdc 100644
--- a/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R
+++ b/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R
@@ -23,7 +23,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
              FILE = "aglu/AGLU_ctry",
              "L100.LDS_ag_HA_ha",
              "L101.ag_HA_bm2_R_C_Y",
-             "L102.ag_HA_bm2_R_C_GLU",
+             "L101.ag_HA_bm2_R_C_GLU",
              FILE = "aglu/IFA2002_Fert_ktN",
              FILE = "aglu/IFA_Fert_ktN"))
   } else if(command == driver.DECLARE_OUTPUTS) {
@@ -44,7 +44,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
       AGLU_ctry <- get_data(all_data, "aglu/AGLU_ctry")
       L100.LDS_ag_HA_ha <- get_data(all_data, "L100.LDS_ag_HA_ha")
       L101.ag_HA_bm2_R_C_Y <- get_data(all_data, "L101.ag_HA_bm2_R_C_Y")
-      L102.ag_HA_bm2_R_C_GLU <- get_data(all_data, "L102.ag_HA_bm2_R_C_GLU")
+      L101.ag_HA_bm2_R_C_GLU <- get_data(all_data, "L101.ag_HA_bm2_R_C_GLU")
       IFA2002_Fert_ktN <- get_data(all_data, "aglu/IFA2002_Fert_ktN")
       IFA_Fert_ktN <- get_data(all_data, "aglu/IFA_Fert_ktN")
 
@@ -78,7 +78,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
       # First, calculate the FAO_LDS scaler for each region-commodity combination
       # Take the FAO Harvested area data in table L101.ag_HA_bm2_R_C_Y and get the average value for each
       # region-commodity combination over the Monfreda/LDS years = 1998-2002 default.
-      # Then Take the LDS harvested area data, L102.ag_HA_bm2_R_C_GLU, sum to the region-commodity level,
+      # Then Take the LDS harvested area data, L101.ag_HA_bm2_R_C_GLU, sum to the region-commodity level,
       # join it to the averaged FAO data and compute an FAO_LDS scaler as FAO/LDS:
       #
       # Take FAO HA data and calulate the average value over aglu.FAO_LDS_YEARS for each region-commodity combo:
@@ -88,7 +88,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
         summarise(FAO = mean(value)) ->
         L141.FAO
       # Take LDS HA data and aggregate to the GCAM region-commodity level:
-      L102.ag_HA_bm2_R_C_GLU %>%
+      L101.ag_HA_bm2_R_C_GLU %>%
         group_by(GCAM_region_ID, GCAM_commodity) %>%
         summarise(LDS = sum(value)) %>% ungroup() %>%
         # Join in the FAO data from the previous pipeline
@@ -275,7 +275,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
                        "aglu/AGLU_ctry",
                        "L100.LDS_ag_HA_ha",
                        "L101.ag_HA_bm2_R_C_Y",
-                       "L102.ag_HA_bm2_R_C_GLU",
+                       "L101.ag_HA_bm2_R_C_GLU",
                        "aglu/IFA2002_Fert_ktN",
                        "aglu/IFA_Fert_ktN") ->
         L141.ag_Fert_Cons_MtN_ctry_crop
diff --git a/input/gcamdata/R/zchunk_LB142.ag_Fert_IO_R_C_Y_GLU.R b/input/gcamdata/R/zchunk_LB142.ag_Fert_IO_R_C_Y_GLU.R
index 1d89948..7658b69 100644
--- a/input/gcamdata/R/zchunk_LB142.ag_Fert_IO_R_C_Y_GLU.R
+++ b/input/gcamdata/R/zchunk_LB142.ag_Fert_IO_R_C_Y_GLU.R
@@ -23,7 +23,7 @@ module_aglu_LB142.ag_Fert_IO_R_C_Y_GLU <- function(command, ...) {
              "L100.LDS_ag_prod_t",
              "L100.FAO_Fert_Cons_tN",
              "L100.FAO_Fert_Prod_tN",
-             "L103.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_Prod_Mt_R_C_Y_GLU",
              "L141.ag_Fert_Cons_MtN_ctry_crop"))
   } else if(command == driver.DECLARE_OUTPUTS) {
     return(c("L142.ag_Fert_Prod_MtN_ctry_Y",
@@ -43,7 +43,7 @@ module_aglu_LB142.ag_Fert_IO_R_C_Y_GLU <- function(command, ...) {
     L100.LDS_ag_prod_t <- get_data(all_data, "L100.LDS_ag_prod_t")
     L100.FAO_Fert_Cons_tN <- get_data(all_data, "L100.FAO_Fert_Cons_tN")
     L100.FAO_Fert_Prod_tN <- get_data(all_data, "L100.FAO_Fert_Prod_tN")
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
     L141.ag_Fert_Cons_MtN_ctry_crop <- get_data(all_data, "L141.ag_Fert_Cons_MtN_ctry_crop")
 
     # Compile N fertilizer production and consumption by country, and adjust country production so that production and consumption balance globally
@@ -129,14 +129,14 @@ module_aglu_LB142.ag_Fert_IO_R_C_Y_GLU <- function(command, ...) {
       summarise(Fert_Cons_MtN = sum(Fert_Cons_MtN)) %>%
       ungroup() %>%
       # Match in agricultural production by GCAM region / commodity / GLU in the base year; this creates NAs
-      left_join(filter(L103.ag_Prod_Mt_R_C_Y_GLU, year %in% aglu.BASE_YEAR_IFA), by = c("GCAM_region_ID", "GCAM_commodity", "GLU")) %>%
+      left_join(filter(L101.ag_Prod_Mt_R_C_Y_GLU, year %in% aglu.BASE_YEAR_IFA), by = c("GCAM_region_ID", "GCAM_commodity", "GLU")) %>%
       # Calculate unscaled input-output coefficients as unscaled fertilizer demands divided by agricultural production
       mutate(Fert_IO_unscaled = Fert_Cons_MtN / value,
              Fert_IO_unscaled = replace(Fert_IO_unscaled, Fert_IO_unscaled == Inf, 0)) %>%
       replace_na(list(Fert_IO_unscaled = 0)) %>%
       select(-year, -value, -Fert_Cons_MtN) %>%
       # Match these coefficients into historical agricultural production (right_join: same coefficients for all years)
-      right_join(L103.ag_Prod_Mt_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU")) %>%
+      right_join(L101.ag_Prod_Mt_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU")) %>%
       # Calculate unscaled fertilizer consumption by year as production multiply coefficients
       mutate(Fert_Cons_MtN_unscaled = value * Fert_IO_unscaled) ->
       L142.ag_Fert_Cons_MtN_R_C_Y_GLU
@@ -213,7 +213,7 @@ module_aglu_LB142.ag_Fert_IO_R_C_Y_GLU <- function(command, ...) {
       add_precursors("common/iso_GCAM_regID",
                      "aglu/FAO/FAO_ag_items_PRODSTAT",
                      "L100.LDS_ag_prod_t",
-                     "L103.ag_Prod_Mt_R_C_Y_GLU",
+                     "L101.ag_Prod_Mt_R_C_Y_GLU",
                      "L141.ag_Fert_Cons_MtN_ctry_crop") ->
       L142.ag_Fert_IO_R_C_Y_GLU
 
diff --git a/input/gcamdata/R/zchunk_LB161.ag_R_C_Y_GLU_irr.R b/input/gcamdata/R/zchunk_LB161.ag_R_C_Y_GLU_irr.R
index 519001c..0995304 100644
--- a/input/gcamdata/R/zchunk_LB161.ag_R_C_Y_GLU_irr.R
+++ b/input/gcamdata/R/zchunk_LB161.ag_R_C_Y_GLU_irr.R
@@ -17,8 +17,8 @@
 #' @author RC August 2017
 module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
   if(command == driver.DECLARE_INPUTS) {
-    return(c("L103.ag_Prod_Mt_R_C_Y_GLU",
-             "L103.ag_HA_bm2_R_C_Y_GLU",
+    return(c("L101.ag_Prod_Mt_R_C_Y_GLU",
+             "L101.ag_HA_bm2_R_C_Y_GLU",
              "L152.ag_irrProd_Mt_R_C_GLU",
              "L152.ag_irrHA_bm2_R_C_GLU",
              "L152.ag_rfdProd_Mt_R_C_GLU",
@@ -39,8 +39,8 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       irrHA <- rfdHA <- irrHA_frac <- irrYield <- rfdYield <- MgdFor_adj <- NULL # silence package check.
 
     # Load required inputs
-    L103.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L103.ag_Prod_Mt_R_C_Y_GLU")
-    L103.ag_HA_bm2_R_C_Y_GLU <- get_data(all_data, "L103.ag_HA_bm2_R_C_Y_GLU")
+    L101.ag_Prod_Mt_R_C_Y_GLU <- get_data(all_data, "L101.ag_Prod_Mt_R_C_Y_GLU")
+    L101.ag_HA_bm2_R_C_Y_GLU <- get_data(all_data, "L101.ag_HA_bm2_R_C_Y_GLU")
     L152.ag_irrProd_Mt_R_C_GLU <- get_data(all_data, "L152.ag_irrProd_Mt_R_C_GLU")
     L152.ag_irrHA_bm2_R_C_GLU <- get_data(all_data, "L152.ag_irrHA_bm2_R_C_GLU")
     L152.ag_rfdProd_Mt_R_C_GLU <- get_data(all_data, "L152.ag_rfdProd_Mt_R_C_GLU")
@@ -57,7 +57,7 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       # Repeat the same irrigated fraction to all historical years
       repeat_add_columns(tibble(year = HISTORICAL_YEARS)) %>%
       # Match to FAO annual total production
-      right_join(L103.ag_Prod_Mt_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
+      right_join(L101.ag_Prod_Mt_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
       # Calculate irrigated production by multiplying total by fraction irrigated
       mutate(irrProd = value * irrProd_frac,
              # Calculate rainfed production by multiplying total by fraction rainfed
@@ -80,7 +80,7 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       # Repeat the same irrigated fraction to all historical years
       repeat_add_columns(tibble(year = HISTORICAL_YEARS)) %>%
       # Match to FAO annual total harvested area
-      right_join(L103.ag_HA_bm2_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
+      right_join(L101.ag_HA_bm2_R_C_Y_GLU, by = c("GCAM_region_ID", "GCAM_commodity", "GLU", "year")) %>%
       # Calculate irrigated production by multiplying total by fraction irrigated
       mutate(irrHA = value * irrHA_frac,
              # Calculate rainfed production by multiplying total by fraction rainfed
@@ -109,7 +109,7 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       add_comments("Combine FAO annual production data and GTAP irrigated vs rainfed disaggregated data by region / commodity / GLU") %>%
       add_comments("Multiply annual total production and a constant irrigated fraction across all histrical years") %>%
       add_legacy_name("L161.ag_irrProd_Mt_R_C_Y_GLU") %>%
-      add_precursors("L103.ag_Prod_Mt_R_C_Y_GLU",
+      add_precursors("L101.ag_Prod_Mt_R_C_Y_GLU",
                      "L152.ag_irrProd_Mt_R_C_GLU") ->
       L161.ag_irrProd_Mt_R_C_Y_GLU
 
@@ -120,7 +120,7 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       add_comments("Combine FAO annual production data and GTAP irrigated vs rainfed disaggregated data by region / commodity / GLU") %>%
       add_comments("Multiply annual total production and a constant rainfed fraction across all histrical years") %>%
       add_legacy_name("L161.ag_rfdProd_Mt_R_C_Y_GLU") %>%
-      add_precursors("L103.ag_Prod_Mt_R_C_Y_GLU",
+      add_precursors("L101.ag_Prod_Mt_R_C_Y_GLU",
                      "L152.ag_rfdProd_Mt_R_C_GLU") ->
       L161.ag_rfdProd_Mt_R_C_Y_GLU
 
@@ -131,7 +131,7 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       add_comments("Combine FAO annual harvested area data and GTAP irrigated vs rainfed disaggregated data by region / commodity / GLU") %>%
       add_comments("Multiply annual total harvested area and a constant irrigated fraction across all histrical years") %>%
       add_legacy_name("L161.ag_irrHA_bm2_R_C_Y_GLU") %>%
-      add_precursors("L103.ag_HA_bm2_R_C_Y_GLU",
+      add_precursors("L101.ag_HA_bm2_R_C_Y_GLU",
                      "L152.ag_irrHA_bm2_R_C_GLU") ->
       L161.ag_irrHA_bm2_R_C_Y_GLU
 
@@ -142,7 +142,7 @@ module_aglu_LB161.ag_R_C_Y_GLU_irr <- function(command, ...) {
       add_comments("Combine FAO annual harvested area data and GTAP irrigated vs rainfed disaggregated data by region / commodity / GLU") %>%
       add_comments("Multiply annual total harvested area and a constant rainfed fraction across all histrical years") %>%
       add_legacy_name("L161.ag_rfdHA_bm2_R_C_Y_GLU") %>%
-      add_precursors("L103.ag_HA_bm2_R_C_Y_GLU",
+      add_precursors("L101.ag_HA_bm2_R_C_Y_GLU",
                      "L152.ag_rfdHA_bm2_R_C_GLU") ->
       L161.ag_rfdHA_bm2_R_C_Y_GLU
 
diff --git a/input/gcamdata/man/module_aglu_L2042.resbio_input_irr_mgmt.Rd b/input/gcamdata/man/module_aglu_L2042.resbio_input_irr_mgmt.Rd
index 44aed2d..a897591 100644
--- a/input/gcamdata/man/module_aglu_L2042.resbio_input_irr_mgmt.Rd
+++ b/input/gcamdata/man/module_aglu_L2042.resbio_input_irr_mgmt.Rd
@@ -35,7 +35,7 @@ and technology combinations from this table are repeated for each GCAM region an
 A_resbio_curves and then, in specified calibration years BASE_YEARS, replaced by fractions in  A_bio_frac_prod_R to form the table of
 Mill resbio supply curves for each region and year.
 
-For Agriculture Residue Biomass, each GCAM region-commodity-GLU combination in L103.ag_Prod_Mt_R_C_Y_GLU is converted to a
+For Agriculture Residue Biomass, each GCAM region-commodity-GLU combination in L101.ag_Prod_Mt_R_C_Y_GLU is converted to a
 region-supplySector-supplySubsector-ProductionTech combination, and parameters from L111.ag_resbio_R_C are joined and rounded
 for each region-supplySector. These parameters are then repeated for model years, irrigation types, and management technology levels.
 Finally, for each region-supplySector-supplySubsector-ProductionTech-irrigation-tech combination in this table, base
diff --git a/input/gcamdata/man/module_aglu_LA101.ag_FAO_R_C_Y.Rd b/input/gcamdata/man/module_aglu_LA101.ag_FAO_R_C_Y.Rd
index 8752bb0..c87020b 100644
--- a/input/gcamdata/man/module_aglu_LA101.ag_FAO_R_C_Y.Rd
+++ b/input/gcamdata/man/module_aglu_LA101.ag_FAO_R_C_Y.Rd
@@ -26,7 +26,10 @@ This chunk aggregates FAO food consumption, agricultural production,
 and harvested area data up to GCAM commodities and GCAM regions. Data is converted
 from FAO units (tons, hectares) to GCAM units (Mt, Pcal, billion km2). Note that
 FAO's alfalfa production in the USA is divided by 4 "for consistency with USDA".
+Note (August 2018 GPK revision) - The FAO production and harvested area are disaggregated
+to basin PRIOR to aggregation by GCAM region. This reduces the bias from using a single
+year (around 2000) to disaggregate to basin, in multi-country regions.
 }
 \author{
-KVC March 2017
+KVC March 2017 (revised August 2018 by GPK)
 }
diff --git a/input/gcamdata/man/module_aglu_LA102.ag_LDS_R_C_GLU.Rd b/input/gcamdata/man/module_aglu_LA102.ag_LDS_R_C_GLU.Rd
deleted file mode 100644
index ef1ca8e..0000000
--- a/input/gcamdata/man/module_aglu_LA102.ag_LDS_R_C_GLU.Rd
+++ /dev/null
@@ -1,31 +0,0 @@
-% Generated by roxygen2: do not edit by hand
-% Please edit documentation in R/zchunk_LA102.ag_LDS_R_C_GLU.R
-\name{module_aglu_LA102.ag_LDS_R_C_GLU}
-\alias{module_aglu_LA102.ag_LDS_R_C_GLU}
-\title{module_aglu_LA102.ag_LDS_R_C_GLU}
-\usage{
-module_aglu_LA102.ag_LDS_R_C_GLU(command, ...)
-}
-\arguments{
-\item{command}{API command to execute}
-
-\item{...}{other optional parameters, depending on command}
-}
-\value{
-Depends on \code{command}: either a vector of required inputs,
-a vector of output names, or (if \code{command} is "MAKE") all
-the generated outputs: \code{L102.ag_HA_bm2_R_C_GLU}, \code{L102.ag_Prod_Mt_R_C_GLU}. The corresponding file in the
-original data system was \code{LA102.ag_LDS_R_C_GLU.R} (aglu level1).
-}
-\description{
-Initializes harvested area and production values using LDS data for each GCAM Region-Commodity-GLU combination.
-}
-\details{
-This module takes LDS initialization data (sourced from HYDE, SAGE and other places) at the
-iso country-GLU-GTAP_crop level for both Harvested Area and Agricultural Production, and aggregates to the
-GCAM region and commodity level. This module also converts to GCAM model units of billion meters squared (bm2)
-for Harvested Area and of Megatons (Mt) for Production.
-}
-\author{
-ACS April 2017
-}
diff --git a/input/gcamdata/man/module_aglu_LA103.ag_R_C_Y_GLU.Rd b/input/gcamdata/man/module_aglu_LA103.ag_R_C_Y_GLU.Rd
deleted file mode 100644
index ec654bb..0000000
--- a/input/gcamdata/man/module_aglu_LA103.ag_R_C_Y_GLU.Rd
+++ /dev/null
@@ -1,31 +0,0 @@
-% Generated by roxygen2: do not edit by hand
-% Please edit documentation in R/zchunk_LA103.ag_R_C_Y_GLU.R
-\name{module_aglu_LA103.ag_R_C_Y_GLU}
-\alias{module_aglu_LA103.ag_R_C_Y_GLU}
-\title{module_aglu_LA103.ag_R_C_Y_GLU}
-\usage{
-module_aglu_LA103.ag_R_C_Y_GLU(command, ...)
-}
-\arguments{
-\item{command}{API command to execute}
-
-\item{...}{other optional parameters, depending on command}
-}
-\value{
-Depends on \code{command}: either a vector of required inputs,
-a vector of output names, or (if \code{command} is "MAKE") all
-the generated outputs: \code{L103.ag_Prod_Mt_R_C_Y_GLU}, \code{L103.ag_Prod_Mt_R_C_Y}, \code{L103.ag_HA_bm2_R_C_Y_GLU}, \code{L103.ag_Yield_kgm2_R_C_Y_GLU}. The corresponding file in the
-original data system was \code{LA103.ag_R_C_Y_GLU.R} (aglu level1).
-}
-\description{
-Calculate production, harvested area, and yield by region, crop, GLU, and year.
-}
-\details{
-We only have production and harvested area by region and GLU for a single
-representative base year (circa 2000), and are using that to downscale regional
-production and harvested area in all years. So, if GLU223 accounted for 20% of U.S.
-corn production in ~2000, then it accounted for 20% of US corn production in all years.
-}
-\author{
-BBL April 2017
-}
-- 
2.10.1 (Apple Git-78)


From ea5afdd9cc928662b0b4da5cf52e5f5bc7bb9d6b Mon Sep 17 00:00:00 2001
From: "Kyle, G Page" <pkyle@pnnl.gov>
Date: Tue, 21 Aug 2018 18:51:01 -0400
Subject: [PATCH 2/2] * revision to method for reconciling FAO and
 Monfreda/LDS, so that crops are aggregated to GCAM commodities first. This
 reduces the "foddergrass" losses (50% of global total) that would otherwise
 happen from unmatched crops in the 2 databases. * revision to the methods for
 computing fertilizer consumption by country and crop, to avoid the
 possibility for fodder crop discrepancies to lead to very high IO coefs.
 Builds on prior work on this topic a few years ago.

---
 input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R       | 77 +++++++++-------------
 .../R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R         | 68 ++++++++++---------
 2 files changed, 68 insertions(+), 77 deletions(-)

diff --git a/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R b/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R
index 98d6431..1e2c3b2 100644
--- a/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R
+++ b/input/gcamdata/R/zchunk_LA101.ag_FAO_R_C_Y.R
@@ -34,7 +34,6 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
     return(c("L101.ag_Food_Mt_R_C_Y",
              "L101.ag_Food_Pcal_R_C_Y",
              "L101.ag_kcalg_R_C_Y",
-             "L101.ag_HA_bm2_R_C_GLU",
              "L101.ag_HA_bm2_R_C_Y",
              "L101.ag_HA_bm2_R_C_Y_GLU",
              "L101.ag_Prod_Mt_R_C_Y",
@@ -77,7 +76,7 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
       select(-countries, -country.codes, -item.codes, -element, -element.codes) %>%                               # Remove unnecessary columns
       left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                                   # Map in ISO codes
       left_join(FAO_ag_items_cal_SUA, by = "item") %>%                                                           # Map in GCAM commodities
-      filter(!is.na(GCAM_commodity)) %>%                                                                          # Remove commodities not included in GCAM      mutate(value = value * CONV_HA_BM2) %>%                                                                     # Convert from hectares to billion square kilometers
+      filter(!is.na(GCAM_commodity)) %>%                                                                          # Remove commodities not included in GCAM
       mutate(value = value * Mcal_t * CONV_MCAL_PCAL) %>%                                                        # Convert from tons to Pcal
       group_by(GCAM_region_ID, GCAM_commodity, year) %>%                                                          # Group by region, commodity, year
       summarize(value = sum(value)) %>%                                                                           # Aggregate then map to appropriate data frame
@@ -117,47 +116,47 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
       FAO_PRODSTAT_MERGED
 
     # Next we downscale the data from countries to basins, using the basin-within-country shares
-    # of each crop in the Monfreda (pre-processed by LDS) data on harvested area and production
+    # of each GCAM commodity in the Monfreda (pre-processed by LDS) data on harvested area and production
+    # Note - using GCAM commodities rather than specific crops in this task. This avoids dropping data, particularly
+    # for the grass fodder crops which are poorly matched with the FAO data.
     LDS_ag_SHARES <-
-      left_join_error_no_match(L100.LDS_ag_HA_ha, L100.LDS_ag_prod_t, by = c("iso", "GLU", "GTAP_crop")) %>%
+      left_join_error_no_match(L100.LDS_ag_HA_ha, L100.LDS_ag_prod_t, by = c("iso", "GLU", "GTAP_crop")) %>%    # Join the Monfreda/LDS datasets
       rename(harvested.area = value.x,
              production = value.y) %>%
-      left_join(FAO_ag_items_PRODSTAT[c("item", "GTAP_crop")], by = "GTAP_crop") %>%
-      drop_na() %>%   # crops in the Monfreda/GTAP dataset but not FAOSTAT are dropped (BrdBeanGreen and KapokFibre)
-      group_by(iso, GTAP_crop) %>%
-      mutate(HA_share_GLU = harvested.area / sum(harvested.area),
+      left_join(FAO_ag_items_PRODSTAT[c("GTAP_crop", "GCAM_commodity")], by = "GTAP_crop") %>%                  # Join in the GCAM commodities and aggregate.
+      drop_na() %>%   # drop any crops not considered in GCAM
+      group_by(iso, GCAM_commodity, GLU) %>%
+      summarise(harvested.area = sum(harvested.area),
+                production = sum(production)) %>%
+      ungroup() %>%
+      group_by(iso, GCAM_commodity) %>%
+      mutate(HA_share_GLU = harvested.area / sum(harvested.area),                                               # Compute the shares of country/crop/GLU within country/crop
              prod_share_GLU = production / sum(production)) %>%
       ungroup() %>%
-      select(iso, GLU, item, HA_share_GLU, prod_share_GLU)
-
-    # Write out the Monfreda/LDS harvested area by GCAM region, commodity, and GLU for the ~2000 base year
-    L101.ag_HA_bm2_R_C_GLU <- L100.LDS_ag_HA_ha %>%
-      left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                                           # Map in ISO codes
-      left_join(unique(FAO_ag_items_PRODSTAT[ c("GTAP_crop", "GCAM_commodity")]), by = "GTAP_crop") %>%                  # Map in GCAM commodities
-      filter(!is.na(GCAM_commodity)) %>%                                                                                 # Remove commodities not included in GCAM
-      group_by(GCAM_region_ID, GCAM_commodity, GLU) %>%                                                                  # Aggregate by GCAM regions, commodities, GLU
-      summarise(value = sum(value)) %>%
-      mutate(value = value * CONV_HA_BM2) %>%                                                                            # convert from hectares to billion square meters
-      ungroup()
-
+      select(iso, GLU, GCAM_commodity, HA_share_GLU, prod_share_GLU)
 
+    # FAO_PRODSTAT_DOWNSCALED: FAO Prodstat data aggregated by GCAM commodity and downscaled to GLU.
     FAO_PRODSTAT_DOWNSCALED <- FAO_PRODSTAT_MERGED %>%
-      full_join(LDS_ag_SHARES, by = c("iso", "item")) %>%
-      drop_na() %>%   # zeroes are not written to the LDS databases, and return missing values here
+      left_join(FAO_ag_items_PRODSTAT[c("item", "GCAM_commodity")], by = "item") %>%
+      filter(!is.na(GCAM_commodity)) %>%                                                                        # Remove commodities not included in GCAM
+      group_by(iso, GCAM_commodity, year) %>%
+      summarise(harvested.area = sum(harvested.area),
+                production = sum(production)) %>%
+      ungroup() %>%
+      full_join(LDS_ag_SHARES, by = c("iso", "GCAM_commodity")) %>%                                             # Join in the shares, and multiply to compute the downscaled production and harvested area quantities
+      drop_na() %>%                                                                                             # zeroes in Monfreda are not written to the LDS databases, so the join returns missing values for shares
       mutate(harvested.area = harvested.area * HA_share_GLU,
              production = production * prod_share_GLU)
 
     # Process FAO production data: convert units, aggregate to region, commodity, and GLU
     FAO_PRODSTAT_DOWNSCALED %>%
-      select(iso, item, GLU, year, production) %>%                                                                   # Select relevant columns (not harvested.area)
+      select(iso, GCAM_commodity, GLU, year, production) %>%                                                    # Select relevant columns (not harvested.area)
       rename(value = production) %>%                                                                            # Rename column since tests are expecting "value"
-      left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                                 # Map in ISO codes
-      left_join(unique(FAO_ag_items_PRODSTAT[ c("item", "GCAM_commodity")]), by = "item") %>%                  # Map in GCAM commodities
-      filter(!is.na(GCAM_commodity)) %>%                                                                        # Remove commodities not included in GCAM
-      group_by(GCAM_region_ID, GCAM_commodity, GLU, year) %>%                                                        # Group by region, commodity, GLU, year
+      left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                                  # Map in ISO codes
+      group_by(GCAM_region_ID, GCAM_commodity, GLU, year) %>%                                                   # Group by region, commodity, GLU, year
       summarize(value = sum(value)) %>%                                                                         # Aggregate then map to appropriate data frame
-      mutate(value = value * CONV_TON_MEGATON) %>%                                                             # Convert from tons to Mt
-      ungroup() ->                                                                                           # Ungroup before complete
+      mutate(value = value * CONV_TON_MEGATON) %>%                                                              # Convert from tons to Mt
+      ungroup() ->                                                                                              # Ungroup before complete
       L101.ag_Prod_Mt_R_C_Y_GLU
 
     # Also write out the production volumes without basin-level detail (by region, crop, year)
@@ -171,11 +170,9 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
 
     # Now, Process FAO harvested area data: convert units, aggregate to region, commodity, and GLU
     FAO_PRODSTAT_DOWNSCALED %>%
-      select(iso, item, GLU, year, harvested.area) %>%                                                             # Select relevant columns (not production)
+      select(iso, GCAM_commodity, GLU, year, harvested.area) %>%                                              # Select relevant columns (not production)
       rename(value = harvested.area) %>%                                                                      # Rename column since tests are expecting "value"
       left_join_error_no_match(iso_GCAM_regID, by = "iso") %>%                                               # Map in ISO codes
-      left_join(unique(FAO_ag_items_PRODSTAT[ c("item", "GCAM_commodity")]), by = "item") %>%                # Map in GCAM commodities
-      filter(!is.na(GCAM_commodity)) %>%                                                                      # Remove commodities not included in GCAM
       group_by(GCAM_region_ID, GCAM_commodity, GLU, year) %>%                                                      # Group by region, commodity, GLU, year
       summarize(value = sum(value)) %>%                                                                       # Aggregate then map to appropriate data frame
       mutate(value = value * CONV_HA_BM2) %>%                                                                # Convert from hectares to billion m2
@@ -224,17 +221,6 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
       add_legacy_name("L101.ag_kcalg_R_C_Y") %>%
       add_precursors("L100.FAO_ag_Food_t", "aglu/FAO/FAO_ag_items_cal_SUA", "common/iso_GCAM_regID") ->
       L101.ag_kcalg_R_C_Y
-    L101.ag_HA_bm2_R_C_GLU %>%
-      add_title("Harvested area by GCAM region / commodity / GLU") %>%
-      add_units("Thousand km^2 = billion m^2 (bm2") %>%
-      add_comments("LDS harvested area data, sourced from Monfreda,") %>%
-      add_comments("is read in at the iso-GLU-GTAP_crop level, and converted to GCAM") %>%
-      add_comments("regions, commodities, and units.") %>%
-      add_legacy_name("L102.ag_HA_bm2_R_C_GLU") %>%
-      add_precursors("common/iso_GCAM_regID",
-                     "aglu/FAO/FAO_ag_items_PRODSTAT",
-                     "L100.LDS_ag_HA_ha") ->
-      L101.ag_HA_bm2_R_C_GLU
 
     # The next four datasets have rounding issues that we couldn't resolve:
     # they kept failing the 'oldnew' test even though data confirmed to be
@@ -284,9 +270,8 @@ module_aglu_LA101.ag_FAO_R_C_Y <- function(command, ...) {
       same_precursors_as(L101.ag_Prod_Mt_R_C_Y_GLU) ->
       L101.ag_Yield_kgm2_R_C_Y_GLU
 
-    return_data(L101.ag_Food_Mt_R_C_Y, L101.ag_Food_Pcal_R_C_Y, L101.ag_kcalg_R_C_Y, L101.ag_HA_bm2_R_C_GLU,
-                L101.ag_HA_bm2_R_C_Y_GLU, L101.ag_HA_bm2_R_C_Y, L101.ag_Prod_Mt_R_C_Y_GLU, L101.ag_Prod_Mt_R_C_Y,
-                L101.ag_Yield_kgm2_R_C_Y_GLU)
+    return_data(L101.ag_Food_Mt_R_C_Y, L101.ag_Food_Pcal_R_C_Y, L101.ag_kcalg_R_C_Y, L101.ag_HA_bm2_R_C_Y_GLU,
+                L101.ag_HA_bm2_R_C_Y, L101.ag_Prod_Mt_R_C_Y_GLU, L101.ag_Prod_Mt_R_C_Y, L101.ag_Yield_kgm2_R_C_Y_GLU)
   } else {
     stop("Unknown command")
   }
diff --git a/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R b/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R
index afd1cdc..877ffa4 100644
--- a/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R
+++ b/input/gcamdata/R/zchunk_LB141.ag_Fert_IFA_ctry_crop.R
@@ -22,8 +22,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
              FILE = "common/iso_GCAM_regID",
              FILE = "aglu/AGLU_ctry",
              "L100.LDS_ag_HA_ha",
-             "L101.ag_HA_bm2_R_C_Y",
-             "L101.ag_HA_bm2_R_C_GLU",
+             "L100.FAO_ag_HA_ha",
              FILE = "aglu/IFA2002_Fert_ktN",
              FILE = "aglu/IFA_Fert_ktN"))
   } else if(command == driver.DECLARE_OUTPUTS) {
@@ -43,8 +42,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
       iso_GCAM_regID <- get_data(all_data, "common/iso_GCAM_regID")
       AGLU_ctry <- get_data(all_data, "aglu/AGLU_ctry")
       L100.LDS_ag_HA_ha <- get_data(all_data, "L100.LDS_ag_HA_ha")
-      L101.ag_HA_bm2_R_C_Y <- get_data(all_data, "L101.ag_HA_bm2_R_C_Y")
-      L101.ag_HA_bm2_R_C_GLU <- get_data(all_data, "L101.ag_HA_bm2_R_C_GLU")
+      L100.FAO_ag_HA_ha <- get_data(all_data, "L100.FAO_ag_HA_ha")
       IFA2002_Fert_ktN <- get_data(all_data, "aglu/IFA2002_Fert_ktN")
       IFA_Fert_ktN <- get_data(all_data, "aglu/IFA_Fert_ktN")
 
@@ -64,8 +62,8 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
 
 
       # Bring together LDS/Monfreda and FAO harvested area by country and crop, in order to calculate an FAO_LDS
-      # scaler for each region-commodity combination.
-      # This region-commodity level scaler is used to scale the LDS harvested area data given at the
+      # scaler for each country-crop combination.
+      # This scaler is used to scale the LDS harvested area data given at the
       # isoCountry-GLU-GTAPcrop level. This scaled harvested area is then multiplied by Fert application rates
       # and summed to get a bottom-up estimate of fertilizer demands at the iso-GTAPcrop level.
       #
@@ -75,46 +73,55 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
       # data, this shouldn't be an issue, however for some crops, particularly fodder crops, there are significant
       # discrepancies (up to 50x), which if unaddressed, would return high fertilizer IO coefs and therefore negative profit rates.
 
-      # First, calculate the FAO_LDS scaler for each region-commodity combination
-      # Take the FAO Harvested area data in table L101.ag_HA_bm2_R_C_Y and get the average value for each
+      # GPK note August 2018 - this scaler used to be computed at the level of GCAM region and commodity. The method
+      # is revised to instead apply by country and specific crop. This addresses (further) data discrepancies on
+      # fodder crop production and harvested area that would otherwise lever off of one another to make unrealistic
+      # fertilizer IO coefficients in selected region/crop/GLUs.
+
+      # First, calculate the FAO_LDS scaler for each nation-crop combination
+      # Take the FAO Harvested area data in table L100.FAO_ag_HA_ha and get the average value for each
       # region-commodity combination over the Monfreda/LDS years = 1998-2002 default.
-      # Then Take the LDS harvested area data, L101.ag_HA_bm2_R_C_GLU, sum to the region-commodity level,
+      # Then Take the LDS harvested area data, L100.LDS_ag_HA_ha, sum to the nation-crop level,
       # join it to the averaged FAO data and compute an FAO_LDS scaler as FAO/LDS:
       #
-      # Take FAO HA data and calulate the average value over aglu.FAO_LDS_YEARS for each region-commodity combo:
-      L101.ag_HA_bm2_R_C_Y %>%
+      # Take FAO HA data and calulate the average value over aglu.FAO_LDS_YEARS for each nation-crop combo:
+      # Note - using FAO's "item" here rather than LDS's "GTAP_crop" because the latter has two crops that correspond
+      # to the FAO's "Grasses Nes for forage;Sil"
+      L100.FAO_ag_HA_ha %>%
         filter(year %in% aglu.FAO_LDS_YEARS) %>%
-        group_by(GCAM_region_ID, GCAM_commodity) %>%
-        summarise(FAO = mean(value)) ->
+        group_by(iso, item) %>%
+        summarise(FAO = mean(value)) %>%
+        ungroup() ->
         L141.FAO
       # Take LDS HA data and aggregate to the GCAM region-commodity level:
-      L101.ag_HA_bm2_R_C_GLU %>%
-        group_by(GCAM_region_ID, GCAM_commodity) %>%
-        summarise(LDS = sum(value)) %>% ungroup() %>%
-        # Join in the FAO data from the previous pipeline
-        left_join_error_no_match(L141.FAO, by = c("GCAM_region_ID", "GCAM_commodity")) %>%
+      L100.LDS_ag_HA_ha %>%
+        left_join(FAO_ag_items_PRODSTAT[c("item", "GTAP_crop")], by = "GTAP_crop") %>%
+        drop_na() %>%                 # Some of the GTAP crops don't have a corresponding crop in the FAO databases
+        group_by(iso, item) %>%
+        summarise(LDS = sum(value)) %>%
         ungroup() %>%
+        # Join in the FAO data from the previous pipeline
+        left_join(L141.FAO, by = c("iso", "item")) %>%
+        replace_na(list(FAO = 0)) %>%
         # Calculate the FAO_LDS scaler value = FAO/LDS
-        mutate(scaler = FAO / LDS) ->
+        mutate(scaler = FAO / LDS) %>%
+        # join back in the GTAP crop, which will be used for the remainder of the processing
+        left_join(FAO_ag_items_PRODSTAT[c("item", "GTAP_crop")], by = "item") %>%
+        select(iso, GTAP_crop, scaler) ->
         # store in an FAO_LDS table:
         L141.FAO_LDS
 
-      # Second, use the region-commodity scalers to scale LDS harvested area data at the iso-GLU-GTAPcrop level.
+      # Second, use the nation-crop scalers to scale LDS harvested area data at the iso-GLU-GTAPcrop level.
       #
       # Take LDS harvested area data at the iso-GLU-GTAPcrop level, L100.LDS_ag_HA_ha, join in the GCAM_region_ID info for
       # each iso, join in the GCAM_commodity info for each GTAPcrop, join the FAO_LDS scaler calculated in the previous
       # pipeline, and use the FAO_LDS scaler to scale the iso-GLU-GTAPcrop harvested area data
       L100.LDS_ag_HA_ha %>%
-        # join GCAM region ID and commodity information
-        left_join_error_no_match(select(iso_GCAM_regID, iso, GCAM_region_ID), by = "iso") %>%
-        left_join(select(FAO_ag_items_PRODSTAT, GTAP_crop, GCAM_commodity), by = "GTAP_crop") %>%
-        na.omit() %>%
-        # join FAO_LDS scaler for each region-commodity
-        left_join_error_no_match(select(L141.FAO_LDS, GCAM_region_ID, GCAM_commodity, scaler),
-                                 by = c("GCAM_region_ID", "GCAM_commodity")) %>%
-        # use the region-commodity scaler to scale down each iso-GLU-GTAP harvested area
+        left_join(L141.FAO_LDS, by = c("iso", "GTAP_crop")) %>%
+        drop_na() %>%     # get rid of the green broad beans and kapok fibres that are in LDS but not FAO
+        # use the nation-crop scaler to scale down each iso-GLU-GTAP harvested area
         mutate(value = value * scaler) %>%
-        select(-GCAM_region_ID, -GCAM_commodity, -scaler) ->
+        select(-scaler) ->
         # store in an LDS harvested area table
         L141.LDS_ag_HA_ha
 
@@ -274,8 +281,7 @@ module_aglu_LB141.ag_Fert_IFA_ctry_crop <- function(command, ...) {
                        "common/iso_GCAM_regID",
                        "aglu/AGLU_ctry",
                        "L100.LDS_ag_HA_ha",
-                       "L101.ag_HA_bm2_R_C_Y",
-                       "L101.ag_HA_bm2_R_C_GLU",
+                       "L100.FAO_ag_HA_ha",
                        "aglu/IFA2002_Fert_ktN",
                        "aglu/IFA_Fert_ktN") ->
         L141.ag_Fert_Cons_MtN_ctry_crop
-- 
2.10.1 (Apple Git-78)

