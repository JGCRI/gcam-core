% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/driver.R
\name{driver_drake}
\alias{driver_drake}
\title{driver_drake}
\usage{
driver_drake(
  stop_before = NULL,
  stop_after = NULL,
  return_inputs_of = stop_before,
  return_outputs_of = stop_after,
  return_data_names = union(inputs_of(return_inputs_of), outputs_of(return_outputs_of)),
  return_data_map_only = FALSE,
  return_plan_only = FALSE,
  write_xml = !return_data_map_only,
  xmldir = XML_DIR,
  quiet = FALSE,
  user_modifications = NULL,
  xml_suffix = NULL,
  ...
)
}
\arguments{
\item{stop_before}{Stop immediately before this chunk (character)}

\item{stop_after}{Stop immediately after this chunk  (character)}

\item{return_inputs_of}{Return the data objects that are inputs for these chunks (character).
If \code{stop_before} is specified, by default that chunk's inputs are returned}

\item{return_outputs_of}{Return the data objects that are output from these chunks (character)
If \code{stop_after} is specified, by default that chunk's outputs are returned}

\item{return_data_names}{Return these data objects (character). By default this is the union of \code{return_inputs_of} and \code{return_outputs_of}}

\item{return_data_map_only}{Return only the precursor information? (logical) This overrides
the other \code{return_*} parameters above}

\item{return_plan_only}{Return only the drake plan (logical)}

\item{write_xml}{Write XML Batch chunk outputs to disk?}

\item{xmldir}{Location to write output XML (ignored if \code{write_outputs} is \code{FALSE})}

\item{quiet}{Suppress output?}

\item{user_modifications}{A list of function names which implement a user mod chunk. See vignettes/usermod_vignette.Rmd for more details and examples.}

\item{xml_suffix}{A suffix to be appended at the end of all XML file name if not null.  Such a feature is
useful when using \code{user_modifications} to generate alternative scenarios.}

\item{...}{Additional arguments to be forwarded on to \code{make}}
}
\value{
A list of all built data (or a data map tibble if requested).
}
\description{
Run the entire data system using drake to manage the process which
gives us a number of features, most notably the "make" capabilities
so that subsequent invocations only need to rebuild targets that
have actually changed.
}
\details{
The interface mostly mimics that of \code{driver} with the exception
that writing outputs is not optional since drake needs to include all
outputs in the cache as a matter of course.  In addition we allow users
to pass any additional arguments to \code{driver_drake} which will be
forwarded on to \code{drake::make}.
}
